11,Jupyter Slide Show,Microsoft,e153ca70-b543-4865-b4c5-b31d34185948,https://github.com/Microsoft/vscode-jupyter-slideshow.git,32622390,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-jupyter-slideshow.git""}"
12,ESLint,Microsoft,583b2b34-2c1e-4634-8c0b-0b82e283ea3a,https://github.com/Microsoft/vscode-eslint.git,30025368,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-eslint.git""}"
13,Language Support for Java(TM) by Red Hat,Red Hat,198a707e-28af-4e84-8610-6e2f628dd12d,https://github.com/redhat-developer/vscode-java.git,28477930,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 150, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/redhat-developer/vscode-java.git""}"
14,Docker,Microsoft,0479fc1c-3d67-49f9-b087-fb9069afe48f,https://github.com/microsoft/vscode-docker.git,27633226,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 173, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/microsoft/vscode-docker.git""}"
15,Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code,Microsoft,e4ee7751-6514-4731-9cdb-7580ffa9e70b,https://github.com/Microsoft/vscode-loc.git,26512207,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-loc.git""}"
16,GitLens — Git supercharged,GitKraken,4de763bd-505d-4978-9575-2b7696ecf94e,https://github.com/gitkraken/vscode-gitlens.git,26501333,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 124, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/gitkraken/vscode-gitlens.git""}"
17,Debugger for Java,Microsoft,61fcd0cf-64d7-4836-8d6b-d55f4fb83281,https://github.com/Microsoft/vscode-java-debug.git,25795026,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 21, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-java-debug.git""}"
18,CMake,twxs,2be7cf14-2603-402e-9771-fd79df83cdf8,https://github.com/twxs/vs.language.cmake.git,24516129,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 1, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/twxs/vs.language.cmake.git""}"
19,CMake Tools,Microsoft,7c889349-8749-43d4-8b5e-08939936d7f4,https://github.com/microsoft/vscode-cmake-tools.git,24466404,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-XML2JS-5414874"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P"", ""credit"": [""Carlos Bello""], ""semver"": {""vulnerable"": [""<0.5.0""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""0.5.0""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.3, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""xml2js"", ""references"": [{""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/issues/593"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/pull/603"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/pull/674"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/pull/681"", ""title"": ""GitHub PR""}, {""url"": ""https://fluidattacks.com/advisories/myers/"", ""title"": ""PoC""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2023-04-13T01:10:09.218628Z""}, {""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2023-05-06T13:46:27.332894Z""}], ""description"": ""## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution due to allowing an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited.\n## PoC\n```js\r\nvar parseString = require('xml2js').parseString;\r\n\r\nlet normal_user_request    = \""<role>admin</role>\"";\r\nlet malicious_user_request = \""<__proto__><role>admin</role></__proto__>\"";\r\n\r\nconst update_user = (userProp) => {\r\n    // A user cannot alter his role. This way we prevent privilege escalations.\r\n    parseString(userProp, function (err, user) {\r\n        if(user.hasOwnProperty(\""role\"") && user?.role.toLowerCase() === \""admin\"") {\r\n            console.log(\""Unauthorized Action\"");\r\n        } else {\r\n            console.log(user?.role[0]);\r\n        }\r\n    });\r\n}\r\n\r\nupdate_user(normal_user_request);\r\nupdate_user(malicious_user_request);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `xml2js` to version 0.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db)\n- [GitHub Issue](https://github.com/Leonidas-from-XIV/node-xml2js/issues/593)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/603)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/674)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/681)\n- [PoC](https://fluidattacks.com/advisories/myers/)\n"", ""epssDetails"": {""percentile"": ""0.14013"", ""probability"": ""0.00046"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-0842""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""xml2js"", ""proprietary"": false, ""creationTime"": ""2023-04-06T07:21:28.176087Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-04-06T07:16:41Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-04-06T07:22:23.185949Z"", ""modificationTime"": ""2023-05-26T07:23:49.422089Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""cmake-tools@microsoft/vscode-cmake-tools#95a17bdc686c8a00d96c74232aef588ba88c5258"", ""xml2js@0.4.23""], ""upgradePath"": [false, ""xml2js@0.5.0""], ""version"": ""0.4.23"", ""name"": ""xml2js"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 68, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 1, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""1 vulnerable dependency path"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 1, ""hasUnknownVersions"": false, ""path"": ""https://github.com/microsoft/vscode-cmake-tools.git""}"
20,C#,Microsoft,d0bfc4ab-1d3a-4487-8782-7cf6027b4fff,https://github.com/dotnet/vscode-csharp.git,23979603,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 140, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/dotnet/vscode-csharp.git""}"
21,Maven for Java,Microsoft,b0f06c6b-24fb-4d7b-bd79-bc5e2fa17312,https://github.com/Microsoft/vscode-maven.git,23917178,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 79, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-maven.git""}"
22,Test Runner for Java,Microsoft,67c06b0d-1891-42ca-b2a8-113e79bff069,https://github.com/Microsoft/vscode-java-test.git,22848527,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 26, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-java-test.git""}"
23,Project Manager for Java,Microsoft,7865e561-1c83-410e-9b99-aabada597a7e,https://github.com/Microsoft/vscode-java-dependency.git,22715901,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 47, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-java-dependency.git""}"
24,C/C++ Themes,Microsoft,99b17261-8f6e-45f0-9ad5-a69c6f509a4f,https://github.com/Microsoft/vscode-cpptools.git,22611635,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-cpptools.git""}"
25,Extension Pack for Java,Microsoft,96f11e1f-1a46-4592-b084-f025b2c2a81f,https://github.com/Microsoft/vscode-java-pack.git,22320851,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 109, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-java-pack.git""}"
26,WSL,Microsoft,f0c5397b-d357-4197-99f0-cb4202f22818,https://github.com/Microsoft/vscode-remote-release.git,22226497,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-remote-release.git""}"
27,Code Runner,Jun Han,a6a0c5b2-d078-4bf5-a9ee-4e37054414b3,https://github.com/formulahendry/vscode-code-runner.git,22176124,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 9, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/formulahendry/vscode-code-runner.git""}"
28,C/C++ Extension Pack,Microsoft,3957b2f6-f086-49b5-a7b4-5da772123130,https://github.com/microsoft/vscode-cpptools.git,21219358,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/microsoft/vscode-cpptools.git""}"
29,isort,Microsoft,4ad0ce32-ff3f-49f0-83b5-93e5dc00cfff,https://github.com/microsoft/vscode-isort.git,20649143,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 14, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/microsoft/vscode-isort.git""}"
30,Dev Containers,Microsoft,93ce222b-5f6f-49b7-9ab1-a0463c6238df,https://github.com/Microsoft/vscode-remote-release.git,20515935,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-remote-release.git""}"
31,Material Icon Theme,Philipp Kief,5db78037-f674-459f-a236-db622c427c5b,https://github.com/PKief/vscode-material-icon-theme.git,20038133,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 1, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/PKief/vscode-material-icon-theme.git""}"
32,IntelliCode API Usage Examples,Microsoft,9fa2a00e-3bfa-4c2a-abc4-a865bb2b5cf3,https://github.com/MicrosoftDocs/intellicode.git,18183071,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/MicrosoftDocs/intellicode.git""}"
33,Remote - SSH,Microsoft,607fd052-be03-4363-b657-2bd62b83d28a,https://github.com/Microsoft/vscode-remote-release.git,17395658,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-remote-release.git""}"
34,HTML CSS Support,ecmel,aaee577c-f062-495a-9816-0cbd442f1d25,https://github.com/ecmel/vscode-html-css.git,16913285,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/ecmel/vscode-html-css.git""}"
35,Remote - SSH: Editing Configuration Files,Microsoft,bfeaf631-bcff-4908-93ed-fda4ef9a0c5c,https://github.com/Microsoft/vscode-remote-release.git,15935083,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-remote-release.git""}"
36,vscode-icons,VSCode Icons Team,9ccc1dd7-7ec4-4a46-bd4f-7d7b8b9d322a,https://github.com/vscode-icons/vscode-icons.git,15740301,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 71, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/vscode-icons/vscode-icons.git""}"
37,Auto Rename Tag,Jun Han,6e440e71-8ed9-4f25-bb78-4b13096b8a03,https://github.com/formulahendry/vscode-auto-rename-tag.git,15378853,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/formulahendry/vscode-auto-rename-tag.git""}"
38,GitHub Pull Requests and Issues,GitHub,69ddd764-339a-4ecc-97c1-9c4ece58e36d,https://github.com/Microsoft/vscode-pull-request-github.git,14427289,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 119, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-pull-request-github.git""}"
39,YAML,Red Hat,2061917f-f76a-458a-8da9-f162de22b97e,https://github.com/redhat-developer/vscode-yaml.git,13761944,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 75, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/redhat-developer/vscode-yaml.git""}"
40,Vetur,Pine Wu,2f5dd8cb-d251-4d70-abfe-ddebcb077483,https://github.com/vuejs/vetur.git,12969047,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/vuejs/vetur.git""}"
41,Path Intellisense,Christian Kohler,a41c1549-4053-44d4-bf30-60fc809b4a86,https://github.com/ChristianKohler/PathIntellisense.git,11125380,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 9, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/ChristianKohler/PathIntellisense.git""}"
42,Auto Close Tag,Jun Han,d3836729-9cc1-42c1-b2af-d50071f57d29,https://github.com/formulahendry/vscode-auto-close-tag.git,11068397,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/formulahendry/vscode-auto-close-tag.git""}"
43,Better C++ Syntax,Jeff Hykin,73767f91-7dcb-43cb-90b3-596d073eea1f,https://github.com/jeff-hykin/better-cpp-syntax.git,10782040,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/jeff-hykin/better-cpp-syntax.git""}"
44,Go,Go Team at Google,d6f6cfea-4b6f-41f4-b571-6ad2ab7918da,https://github.com/golang/vscode-go.git,10716018,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""go@golang/vscode-go#7e2e5ad5dcc4cff1b70f3583321bfc5abe599035"", ""web-request@1.0.7"", ""request@2.88.2""], ""upgradePath"": [], ""version"": ""2.88.2"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-SEMVER-3247795"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"", ""credit"": [""Alessio Della Libera - Snyk Research Team""], ""semver"": {""vulnerable"": [""<5.7.2"", "">=6.0.0 <6.3.1"", "">=7.0.0 <7.5.2""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""5.7.2"", ""6.3.1"", ""7.5.2""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""semver"", ""references"": [{""url"": ""https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/pull/564"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/npm/node-semver/blob/main/classes/range.js%23L97-L104"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/npm/node-semver/blob/main/internal/re.js%23L138"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/npm/node-semver/blob/main/internal/re.js%23L160"", ""title"": ""Vulnerable Code""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 7.5, ""modificationTime"": ""2023-07-06T01:12:12.552518Z""}, {""assigner"": ""Red Hat"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 7.5, ""modificationTime"": ""2023-07-13T13:32:48.730054Z""}], ""description"": ""## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the function `new Range`, when untrusted user data is provided as a range.\r\n\r\n\r\n## PoC\r\n\r\n```js\r\n\r\nconst semver = require('semver')\r\nconst lengths_2 = [2000, 4000, 8000, 16000, 32000, 64000, 128000]\r\n\r\nconsole.log(\""n[+] Valid range - Test payloads\"")\r\nfor (let i = 0; i =1.2.3' + ' '.repeat(lengths_2[i]) + '<1.3.0';\r\nconst start = Date.now()\r\nsemver.validRange(value)\r\n// semver.minVersion(value)\r\n// semver.maxSatisfying([\""1.2.3\""], value)\r\n// semver.minSatisfying([\""1.2.3\""], value)\r\n// new semver.Range(value, {})\r\n\r\nconst end = Date.now();\r\nconsole.log('length=%d, time=%d ms', value.length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 5.7.2, 6.3.1, 7.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c)\n- [GitHub PR](https://github.com/npm/node-semver/pull/564)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/classes/range.js#L97-L104)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L138)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L160)\n"", ""epssDetails"": {""percentile"": ""0.38160"", ""probability"": ""0.00091"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-25883""], ""CWE"": [""CWE-1333""]}, ""packageName"": ""semver"", ""proprietary"": true, ""creationTime"": ""2023-01-25T16:16:50.073158Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-01-25T16:00:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-20T15:39:58.313421Z"", ""modificationTime"": ""2023-07-13T13:32:48.730054Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""go@golang/vscode-go#7e2e5ad5dcc4cff1b70f3583321bfc5abe599035"", ""semver@7.3.4""], ""upgradePath"": [false, ""semver@7.5.2""], ""version"": ""7.3.4"", ""name"": ""semver"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""go@golang/vscode-go#7e2e5ad5dcc4cff1b70f3583321bfc5abe599035"", ""web-request@1.0.7"", ""request@2.88.2"", ""tough-cookie@2.5.0""], ""upgradePath"": [false, false, false, ""tough-cookie@4.1.3""], ""version"": ""2.5.0"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 89, ""severityMap"": {""critical"": 0, ""high"": 1, ""medium"": 2, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""3 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 3, ""hasUnknownVersions"": false, ""path"": ""https://github.com/golang/vscode-go.git""}"
45,Doxygen Documentation Generator,Christoph Schlosser,da7e26d5-d57c-4742-ab47-d77fb189e195,https://github.com/cschlosser/doxdocgen.git,10510337,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 10, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/cschlosser/doxdocgen.git""}"
46,PHP Debug,Xdebug,044b4b31-2969-4af3-895d-855433b8b46d,https://github.com/xdebug/vscode-php-debug.git,10070204,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-URLRELATIVE-173691"", ""title"": ""Denial of Service (DoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""credit"": [""Sebastian Vollnhals""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.9, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""url-relative"", ""references"": [{""url"": ""https://github.com/junosuarez/url-relative/commit/5d622c3292bb626272551a110751b2a93a0e0abe"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/junosuarez/url-relative/issues/3"", ""title"": ""GitHub Issue""}, {""url"": ""https://www.npmjs.com/advisories/783"", ""title"": ""NPM Security Advisory""}], ""cvssDetails"": [], ""description"": ""## Overview\n[url-relative](https://www.npmjs.com/package/url-relative) is a calculates RFC 1808 relative URLs.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). If the values `to` and `from` are equal, the function hangs and never returns.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/junosuarez/url-relative/commit/5d622c3292bb626272551a110751b2a93a0e0abe)\n- [GitHub Issue](https://github.com/junosuarez/url-relative/issues/3)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/783)\n"", ""epssDetails"": null, ""identifiers"": {""CVE"": [], ""CWE"": [""CWE-400""], ""NSP"": [""783""], ""GHSA"": [""GHSA-86p3-4gfq-38f2""]}, ""packageName"": ""url-relative"", ""proprietary"": false, ""creationTime"": ""2019-02-14T15:18:06.464800Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2019-02-14T01:42:19Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2019-02-14T01:42:19Z"", ""modificationTime"": ""2020-12-14T14:41:35.476539Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 62, ""from"": [""php-debug@xdebug/vscode-php-debug#b07f71baca9e49a210834927c641cb584ea6d285"", ""url-relative@1.0.0""], ""upgradePath"": [], ""version"": ""1.0.0"", ""name"": ""url-relative"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 22, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 1, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""1 vulnerable dependency path"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 1, ""hasUnknownVersions"": false, ""path"": ""https://github.com/xdebug/vscode-php-debug.git""}"
47,PHP Intelephense,Ben Mewburn,ffda6552-0ad5-431b-a4fa-0905a7e4f3f0,https://github.com/bmewburn/vscode-intelephense.git,9925145,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""vscode-intelephense-client@bmewburn/vscode-intelephense#d9f9da554e3441cfcc5139f63765f3e60e31acf8"", ""intelephense@1.9.5"", ""request@2.88.2""], ""upgradePath"": [], ""version"": ""2.88.2"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-SEMVER-3247795"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"", ""credit"": [""Alessio Della Libera - Snyk Research Team""], ""semver"": {""vulnerable"": [""<5.7.2"", "">=6.0.0 <6.3.1"", "">=7.0.0 <7.5.2""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""5.7.2"", ""6.3.1"", ""7.5.2""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""semver"", ""references"": [{""url"": ""https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/pull/564"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/npm/node-semver/blob/main/classes/range.js%23L97-L104"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/npm/node-semver/blob/main/internal/re.js%23L138"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/npm/node-semver/blob/main/internal/re.js%23L160"", ""title"": ""Vulnerable Code""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 7.5, ""modificationTime"": ""2023-07-06T01:12:12.552518Z""}, {""assigner"": ""Red Hat"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 7.5, ""modificationTime"": ""2023-07-13T13:32:48.730054Z""}], ""description"": ""## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the function `new Range`, when untrusted user data is provided as a range.\r\n\r\n\r\n## PoC\r\n\r\n```js\r\n\r\nconst semver = require('semver')\r\nconst lengths_2 = [2000, 4000, 8000, 16000, 32000, 64000, 128000]\r\n\r\nconsole.log(\""n[+] Valid range - Test payloads\"")\r\nfor (let i = 0; i =1.2.3' + ' '.repeat(lengths_2[i]) + '<1.3.0';\r\nconst start = Date.now()\r\nsemver.validRange(value)\r\n// semver.minVersion(value)\r\n// semver.maxSatisfying([\""1.2.3\""], value)\r\n// semver.minSatisfying([\""1.2.3\""], value)\r\n// new semver.Range(value, {})\r\n\r\nconst end = Date.now();\r\nconsole.log('length=%d, time=%d ms', value.length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 5.7.2, 6.3.1, 7.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c)\n- [GitHub PR](https://github.com/npm/node-semver/pull/564)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/classes/range.js#L97-L104)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L138)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L160)\n"", ""epssDetails"": {""percentile"": ""0.38160"", ""probability"": ""0.00091"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-25883""], ""CWE"": [""CWE-1333""]}, ""packageName"": ""semver"", ""proprietary"": true, ""creationTime"": ""2023-01-25T16:16:50.073158Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-01-25T16:00:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-20T15:39:58.313421Z"", ""modificationTime"": ""2023-07-13T13:32:48.730054Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""vscode-intelephense-client@bmewburn/vscode-intelephense#d9f9da554e3441cfcc5139f63765f3e60e31acf8"", ""semver@7.3.8""], ""upgradePath"": [false, ""semver@7.5.2""], ""version"": ""7.3.8"", ""name"": ""semver"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-SEMVER-3247795"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P"", ""credit"": [""Alessio Della Libera - Snyk Research Team""], ""semver"": {""vulnerable"": [""<5.7.2"", "">=6.0.0 <6.3.1"", "">=7.0.0 <7.5.2""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""5.7.2"", ""6.3.1"", ""7.5.2""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""semver"", ""references"": [{""url"": ""https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/npm/node-semver/pull/564"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/npm/node-semver/blob/main/classes/range.js%23L97-L104"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/npm/node-semver/blob/main/internal/re.js%23L138"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/npm/node-semver/blob/main/internal/re.js%23L160"", ""title"": ""Vulnerable Code""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 7.5, ""modificationTime"": ""2023-07-06T01:12:12.552518Z""}, {""assigner"": ""Red Hat"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 7.5, ""modificationTime"": ""2023-07-13T13:32:48.730054Z""}], ""description"": ""## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the function `new Range`, when untrusted user data is provided as a range.\r\n\r\n\r\n## PoC\r\n\r\n```js\r\n\r\nconst semver = require('semver')\r\nconst lengths_2 = [2000, 4000, 8000, 16000, 32000, 64000, 128000]\r\n\r\nconsole.log(\""n[+] Valid range - Test payloads\"")\r\nfor (let i = 0; i =1.2.3' + ' '.repeat(lengths_2[i]) + '<1.3.0';\r\nconst start = Date.now()\r\nsemver.validRange(value)\r\n// semver.minVersion(value)\r\n// semver.maxSatisfying([\""1.2.3\""], value)\r\n// semver.minSatisfying([\""1.2.3\""], value)\r\n// new semver.Range(value, {})\r\n\r\nconst end = Date.now();\r\nconsole.log('length=%d, time=%d ms', value.length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 5.7.2, 6.3.1, 7.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-semver/commit/2f8fd41487acf380194579ecb6f8b1bbfe116be0)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441)\n- [GitHub Commit](https://github.com/npm/node-semver/commit/928e56d21150da0413a3333a3148b20e741a920c)\n- [GitHub PR](https://github.com/npm/node-semver/pull/564)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/classes/range.js#L97-L104)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L138)\n- [Vulnerable Code](https://github.com/npm/node-semver/blob/main/internal/re.js#L160)\n"", ""epssDetails"": {""percentile"": ""0.38160"", ""probability"": ""0.00091"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-25883""], ""CWE"": [""CWE-1333""]}, ""packageName"": ""semver"", ""proprietary"": true, ""creationTime"": ""2023-01-25T16:16:50.073158Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-01-25T16:00:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-20T15:39:58.313421Z"", ""modificationTime"": ""2023-07-13T13:32:48.730054Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""vscode-intelephense-client@bmewburn/vscode-intelephense#d9f9da554e3441cfcc5139f63765f3e60e31acf8"", ""intelephense@1.9.5"", ""semver@7.3.8""], ""upgradePath"": [false, false, ""semver@7.5.2""], ""version"": ""7.3.8"", ""name"": ""semver"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""vscode-intelephense-client@bmewburn/vscode-intelephense#d9f9da554e3441cfcc5139f63765f3e60e31acf8"", ""intelephense@1.9.5"", ""request@2.88.2"", ""tough-cookie@2.5.0""], ""upgradePath"": [false, false, false, ""tough-cookie@4.1.3""], ""version"": ""2.5.0"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 192, ""severityMap"": {""critical"": 0, ""high"": 2, ""medium"": 2, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""4 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 3, ""hasUnknownVersions"": false, ""path"": ""https://github.com/bmewburn/vscode-intelephense.git""}"
48,GitHub Theme,GitHub,7328a705-91fc-49e6-8293-da6f112e482d,https://github.com/primer/github-vscode-theme.git,9731524,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/primer/github-vscode-theme.git""}"
49,ES7+ React/Redux/React-Native snippets,dsznajder,19804510-b475-4dae-b0f7-6ca08fd1af0c,https://github.com/dsznajder/vscode-es7-javascript-react-snippets.git,9606109,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 1, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/dsznajder/vscode-es7-javascript-react-snippets.git""}"
50,Git History,Don Jayamanne,5960f38e-0bbe-4644-8f9c-9c8824e82511,https://github.com/DonJayamanne/gitHistoryVSCode.git,9534057,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 79, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/DonJayamanne/gitHistoryVSCode.git""}"
51,PowerShell,Microsoft,40d39ce9-c381-47a0-80c8-a6661f731eab,https://github.com/PowerShell/vscode-powershell.git,9317730,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 85, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/PowerShell/vscode-powershell.git""}"
52,Remote Explorer,Microsoft,11858313-52cc-4e57-b3e4-d7b65281e34b,https://github.com/Microsoft/vscode-remote-release.git,8405036,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-remote-release.git""}"
53,EditorConfig for VS Code,EditorConfig,f60a60a6-95ba-42d4-b41c-3d24c1b89588,https://github.com/editorconfig/editorconfig-vscode.git,8393208,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 7, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/editorconfig/editorconfig-vscode.git""}"
54,Code Spell Checker,Street Side Software,f6dbd813-b0a0-42c1-90ea-10dde9d925a7,https://github.com/streetsidesoftware/vscode-spell-checker.git,8374468,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 185, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/streetsidesoftware/vscode-spell-checker.git""}"
55,Django,Baptiste Darthenay,4b41a5a8-170e-4156-b2c0-10efb270abbc,https://github.com/vscode-django/vscode-django.git,8297351,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 5, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/vscode-django/vscode-django.git""}"
56,One Dark Pro,binaryify,26a529c9-2654-4b95-a63f-02f6a52429e6,https://github.com/Binaryify/OneDark-Pro.git,8158293,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 2, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Binaryify/OneDark-Pro.git""}"
57,Dart,Dart Code,f57f68ea-9ee8-42b5-9a97-041d3e4278c4,https://github.com/Dart-Code/Dart-Code.git,7648860,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 16, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Dart-Code/Dart-Code.git""}"
58,Jinja,wholroyd,c941a679-d500-46a8-b2a9-208063125901,https://github.com/wholroyd/vscode-jinja.git,7466043,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/wholroyd/vscode-jinja.git""}"
59,.NET Runtime Install Tool,Microsoft,1aab81a1-b3d9-4aef-976b-577d5d90fe3f,https://github.com/dotnet/vscode-dotnet-runtime.git,7399966,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-XML2JS-5414874"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P"", ""credit"": [""Carlos Bello""], ""semver"": {""vulnerable"": [""<0.5.0""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""0.5.0""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.3, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""xml2js"", ""references"": [{""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/issues/593"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/pull/603"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/pull/674"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/Leonidas-from-XIV/node-xml2js/pull/681"", ""title"": ""GitHub PR""}, {""url"": ""https://fluidattacks.com/advisories/myers/"", ""title"": ""PoC""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2023-04-13T01:10:09.218628Z""}, {""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2023-05-06T13:46:27.332894Z""}], ""description"": ""## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution due to allowing an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited.\n## PoC\n```js\r\nvar parseString = require('xml2js').parseString;\r\n\r\nlet normal_user_request    = \""<role>admin</role>\"";\r\nlet malicious_user_request = \""<__proto__><role>admin</role></__proto__>\"";\r\n\r\nconst update_user = (userProp) => {\r\n    // A user cannot alter his role. This way we prevent privilege escalations.\r\n    parseString(userProp, function (err, user) {\r\n        if(user.hasOwnProperty(\""role\"") && user?.role.toLowerCase() === \""admin\"") {\r\n            console.log(\""Unauthorized Action\"");\r\n        } else {\r\n            console.log(user?.role[0]);\r\n        }\r\n    });\r\n}\r\n\r\nupdate_user(normal_user_request);\r\nupdate_user(malicious_user_request);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `xml2js` to version 0.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db)\n- [GitHub Issue](https://github.com/Leonidas-from-XIV/node-xml2js/issues/593)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/603)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/674)\n- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/681)\n- [PoC](https://fluidattacks.com/advisories/myers/)\n"", ""epssDetails"": {""percentile"": ""0.14013"", ""probability"": ""0.00046"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-0842""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""xml2js"", ""proprietary"": false, ""creationTime"": ""2023-04-06T07:21:28.176087Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-04-06T07:16:41Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-04-06T07:22:23.185949Z"", ""modificationTime"": ""2023-05-26T07:23:49.422089Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""vscode-dotnet-runtime@dotnet/vscode-dotnet-runtime#a0d410dae2b836a05870ce33101efa28872de89b"", ""vsce@2.11.0"", ""xml2js@0.4.23""], ""upgradePath"": [false, false, ""xml2js@0.5.0""], ""version"": ""0.4.23"", ""name"": ""xml2js"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 107, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 1, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""1 vulnerable dependency path"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 1, ""hasUnknownVersions"": false, ""path"": ""https://github.com/dotnet/vscode-dotnet-runtime.git""}"
60,Markdown All in One,Yu Zhang,98790d67-10fa-497c-9113-f6c7489207b2,https://github.com/yzhang-gh/vscode-markdown.git,7230453,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 17, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/yzhang-gh/vscode-markdown.git""}"
61,Flutter,Dart Code,f6c3ec04-6057-4d9c-b997-69cba07a6158,https://github.com/Dart-Code/Flutter.git,6982820,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Dart-Code/Flutter.git""}"
62,Japanese Language Pack for Visual Studio Code,Microsoft,077515fe-1509-49c0-9dcc-5511b41682fc,https://github.com/Microsoft/vscode-loc.git,6824207,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-loc.git""}"
63,npm Intellisense,Christian Kohler,dff6b801-247e-40e9-82e8-8c9b1d19d1b8,https://github.com/ChristianKohler/NpmIntellisense.git,6792147,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/ChristianKohler/NpmIntellisense.git""}"
64,Azure Account,Microsoft,819a23e1-b6c6-41cf-9029-e653b537d996,https://github.com/microsoft/vscode-azure-account.git,6785249,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""azure-account@microsoft/vscode-azure-account#f933d30332adcb6406be7b4df20f14560c3eaffe"", ""ms-rest-azure@2.6.2"", ""request@2.88.2""], ""upgradePath"": [], ""version"": ""2.88.2"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""azure-account@microsoft/vscode-azure-account#f933d30332adcb6406be7b4df20f14560c3eaffe"", ""ms-rest-azure@2.6.2"", ""ms-rest@2.5.6"", ""request@2.88.2""], ""upgradePath"": [], ""version"": ""2.88.2"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""azure-account@microsoft/vscode-azure-account#f933d30332adcb6406be7b4df20f14560c3eaffe"", ""request@2.88.0""], ""upgradePath"": [], ""version"": ""2.88.0"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""azure-account@microsoft/vscode-azure-account#f933d30332adcb6406be7b4df20f14560c3eaffe"", ""ms-rest-azure@2.6.2"", ""request@2.88.2"", ""tough-cookie@2.5.0""], ""upgradePath"": [false, false, false, ""tough-cookie@4.1.3""], ""version"": ""2.5.0"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""azure-account@microsoft/vscode-azure-account#f933d30332adcb6406be7b4df20f14560c3eaffe"", ""ms-rest-azure@2.6.2"", ""ms-rest@2.5.6"", ""request@2.88.2"", ""tough-cookie@2.5.0""], ""upgradePath"": [false, false, false, false, ""tough-cookie@4.1.3""], ""version"": ""2.5.0"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""azure-account@microsoft/vscode-azure-account#f933d30332adcb6406be7b4df20f14560c3eaffe"", ""request@2.88.0"", ""tough-cookie@2.4.3""], ""upgradePath"": [false, false, ""tough-cookie@4.1.3""], ""version"": ""2.4.3"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 165, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 6, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""6 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 2, ""hasUnknownVersions"": false, ""path"": ""https://github.com/microsoft/vscode-azure-account.git""}"
65,autoDocstring - Python Docstring Generator,Nils Werner,2d6fea35-f68e-461d-9b7b-5cd05be99451,https://github.com/NilsJPWerner/autoDocstring.git,6670983,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 4, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/NilsJPWerner/autoDocstring.git""}"
66,Python Indent,Kevin Rose,f3cbfb84-b1e1-40ff-b70f-877253461260,https://github.com/kbrose/vsc-python-indent.git,6608444,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 1, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/kbrose/vsc-python-indent.git""}"
67,npm,Microsoft,ae9e3eb0-3357-4cc0-90ee-598d2d384757,https://github.com/Microsoft/vscode-npm-scripts.git,6533634,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 3, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-npm-scripts.git""}"
68,Python Extension Pack,Don Jayamanne,f5188937-53e0-45bb-a16d-61231003fa3b,https://github.com/DonJayamanne/python-extension-pack.git,6492886,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/DonJayamanne/python-extension-pack.git""}"
69,indent-rainbow,oderwat,eaa2127d-cb69-4ab9-8505-a60c9ee5f28b,https://github.com/oderwat/vscode-indent-rainbow.git,6104917,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-DECOMPRESSTAR-559095"", ""title"": ""Arbitrary File Write via Archive Extraction (Zip Slip)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C"", ""credit"": [""Oscar Arnflo""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.3, ""functions"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""module.exports""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""decompress-tar"", ""references"": [{""url"": ""https://github.com/kevva/decompress/pull/73"", ""title"": ""GitHub Fix PR""}, {""url"": ""https://github.com/kevva/decompress/issues/71"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/kevva/decompress-tar/pull/12"", ""title"": ""GitHub PR decompress-tar""}, {""url"": ""https://www.npmjs.com/advisories/1217"", ""title"": ""NPM Advisory""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2022-01-03T18:04:12.459024Z""}], ""description"": ""## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \""../../file.exe\"" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n"", ""epssDetails"": {""percentile"": ""0.75874"", ""probability"": ""0.00619"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2020-12265""], ""CWE"": [""CWE-29""], ""NSP"": [""1217""], ""GHSA"": [""GHSA-qgfr-5hqp-vrw9""]}, ""packageName"": ""decompress-tar"", ""proprietary"": false, ""creationTime"": ""2020-03-02T11:17:35.161853Z"", ""functions_new"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""module.exports""}}], ""alternativeIds"": [], ""disclosureTime"": ""2019-10-15T20:29:24Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2020-02-27T13:28:41Z"", ""modificationTime"": ""2022-01-03T18:04:12.459024Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""indent-rainbow@oderwat/vscode-indent-rainbow#4b6f78bc3d9838ed9f779479bc0796f4f8ee2998"", ""@vscode/test-web@0.0.8"", ""decompress-targz@4.1.1"", ""decompress-tar@4.1.1""], ""upgradePath"": [], ""version"": ""4.1.1"", ""name"": ""decompress-tar"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-DECOMPRESSTAR-559095"", ""title"": ""Arbitrary File Write via Archive Extraction (Zip Slip)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C"", ""credit"": [""Oscar Arnflo""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.3, ""functions"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""module.exports""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""decompress-tar"", ""references"": [{""url"": ""https://github.com/kevva/decompress/pull/73"", ""title"": ""GitHub Fix PR""}, {""url"": ""https://github.com/kevva/decompress/issues/71"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/kevva/decompress-tar/pull/12"", ""title"": ""GitHub PR decompress-tar""}, {""url"": ""https://www.npmjs.com/advisories/1217"", ""title"": ""NPM Advisory""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2022-01-03T18:04:12.459024Z""}], ""description"": ""## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \""../../file.exe\"" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n"", ""epssDetails"": {""percentile"": ""0.75874"", ""probability"": ""0.00619"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2020-12265""], ""CWE"": [""CWE-29""], ""NSP"": [""1217""], ""GHSA"": [""GHSA-qgfr-5hqp-vrw9""]}, ""packageName"": ""decompress-tar"", ""proprietary"": false, ""creationTime"": ""2020-03-02T11:17:35.161853Z"", ""functions_new"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""module.exports""}}], ""alternativeIds"": [], ""disclosureTime"": ""2019-10-15T20:29:24Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2020-02-27T13:28:41Z"", ""modificationTime"": ""2022-01-03T18:04:12.459024Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""indent-rainbow@oderwat/vscode-indent-rainbow#4b6f78bc3d9838ed9f779479bc0796f4f8ee2998"", ""@vscode/test-web@0.0.8"", ""decompress@4.2.1"", ""decompress-tar@4.1.1""], ""upgradePath"": [], ""version"": ""4.1.1"", ""name"": ""decompress-tar"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-DECOMPRESSTAR-559095"", ""title"": ""Arbitrary File Write via Archive Extraction (Zip Slip)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C"", ""credit"": [""Oscar Arnflo""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.3, ""functions"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""module.exports""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""decompress-tar"", ""references"": [{""url"": ""https://github.com/kevva/decompress/pull/73"", ""title"": ""GitHub Fix PR""}, {""url"": ""https://github.com/kevva/decompress/issues/71"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/kevva/decompress-tar/pull/12"", ""title"": ""GitHub PR decompress-tar""}, {""url"": ""https://www.npmjs.com/advisories/1217"", ""title"": ""NPM Advisory""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2022-01-03T18:04:12.459024Z""}], ""description"": ""## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \""../../file.exe\"" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n"", ""epssDetails"": {""percentile"": ""0.75874"", ""probability"": ""0.00619"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2020-12265""], ""CWE"": [""CWE-29""], ""NSP"": [""1217""], ""GHSA"": [""GHSA-qgfr-5hqp-vrw9""]}, ""packageName"": ""decompress-tar"", ""proprietary"": false, ""creationTime"": ""2020-03-02T11:17:35.161853Z"", ""functions_new"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""module.exports""}}], ""alternativeIds"": [], ""disclosureTime"": ""2019-10-15T20:29:24Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2020-02-27T13:28:41Z"", ""modificationTime"": ""2022-01-03T18:04:12.459024Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""indent-rainbow@oderwat/vscode-indent-rainbow#4b6f78bc3d9838ed9f779479bc0796f4f8ee2998"", ""@vscode/test-web@0.0.8"", ""decompress@4.2.1"", ""decompress-tarbz2@4.1.1"", ""decompress-tar@4.1.1""], ""upgradePath"": [], ""version"": ""4.1.1"", ""name"": ""decompress-tar"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-DECOMPRESSTAR-559095"", ""title"": ""Arbitrary File Write via Archive Extraction (Zip Slip)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C"", ""credit"": [""Oscar Arnflo""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.3, ""functions"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""module.exports""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""decompress-tar"", ""references"": [{""url"": ""https://github.com/kevva/decompress/pull/73"", ""title"": ""GitHub Fix PR""}, {""url"": ""https://github.com/kevva/decompress/issues/71"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/kevva/decompress-tar/pull/12"", ""title"": ""GitHub PR decompress-tar""}, {""url"": ""https://www.npmjs.com/advisories/1217"", ""title"": ""NPM Advisory""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2022-01-03T18:04:12.459024Z""}], ""description"": ""## Overview\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip). It is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \""../../file.exe\"" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nThere is no fixed version for `decompress-tar`.\n## References\n- [GitHub Fix PR](https://github.com/kevva/decompress/pull/73)\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n"", ""epssDetails"": {""percentile"": ""0.75874"", ""probability"": ""0.00619"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2020-12265""], ""CWE"": [""CWE-29""], ""NSP"": [""1217""], ""GHSA"": [""GHSA-qgfr-5hqp-vrw9""]}, ""packageName"": ""decompress-tar"", ""proprietary"": false, ""creationTime"": ""2020-03-02T11:17:35.161853Z"", ""functions_new"": [{""version"": [""*""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""module.exports""}}], ""alternativeIds"": [], ""disclosureTime"": ""2019-10-15T20:29:24Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2020-02-27T13:28:41Z"", ""modificationTime"": ""2022-01-03T18:04:12.459024Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""indent-rainbow@oderwat/vscode-indent-rainbow#4b6f78bc3d9838ed9f779479bc0796f4f8ee2998"", ""@vscode/test-web@0.0.8"", ""decompress@4.2.1"", ""decompress-targz@4.1.1"", ""decompress-tar@4.1.1""], ""upgradePath"": [], ""version"": ""4.1.1"", ""name"": ""decompress-tar"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 119, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 4, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""4 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 1, ""hasUnknownVersions"": false, ""path"": ""https://github.com/oderwat/vscode-indent-rainbow.git""}"
70,Git Graph,mhutchie,438221f8-1107-4ccd-a6fe-f3b7fe0856b7,https://github.com/mhutchie/vscode-git-graph.git,6098013,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 2, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/mhutchie/vscode-git-graph.git""}"
71,SQL Server (mssql),Microsoft,4bf45e86-a448-4531-8c01-ef33f4536306,https://github.com/Microsoft/vscode-mssql.git,6089413,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-RANGY-3175702"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"", ""credit"": [""Yuhan Gao (gyhlelecola@163.com)"", ""Peng Zhou (zpbrent@gmail.com)""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""rangy"", ""references"": [{""url"": ""https://github.com/timdown/rangy/issues/478"", ""title"": ""GitHub Issue""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H"", ""cvssV3BaseScore"": 8.2, ""modificationTime"": ""2023-03-03T01:10:11.650300Z""}], ""description"": ""## Overview\n[rangy](https://www.npmjs.org/package/rangy) is an A cross-browser DOM range and selection library\n\nAffected versions of this package are vulnerable to Prototype Pollution when using the extend() function in file `rangy-core.js`.The function uses recursive merge which can lead an attacker to modify properties of the `Object.prototype`\r\n\r\n## PoC\r\n```js\r\nvar rangy= require(\""rangy\"")\r\n\r\n\r\nBAD_JSON = JSON.parse('{\""__proto__\"":{\""test\"":123}}');\r\nconsole.log({}.test) //undefined\r\n\r\nrangy.util.extend({},BAD_JSON,{})\r\nconsole.log({}.test) //\""123\""\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `rangy`.\n## References\n- [GitHub Issue](https://github.com/timdown/rangy/issues/478)\n"", ""epssDetails"": {""percentile"": ""0.14013"", ""probability"": ""0.00046"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26102""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""rangy"", ""proprietary"": true, ""creationTime"": ""2022-12-19T14:39:37.098324Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2022-12-19T14:15:57Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-02-23T13:00:31.861834Z"", ""modificationTime"": ""2023-03-03T01:10:11.650300Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 96, ""from"": [""mssql@Microsoft/vscode-mssql#9277993ebce8c2a2b827fe2ed304e24a9906b18b"", ""rangy@1.3.1""], ""upgradePath"": [], ""version"": ""1.3.1"", ""name"": ""rangy"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 145, ""severityMap"": {""critical"": 0, ""high"": 1, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""1 vulnerable dependency path"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 1, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-mssql.git""}"
72,Dracula Official,Dracula Theme,4e44877c-1c8d-4f9c-ba86-1372d0fbeeb1,https://github.com/dracula/visual-studio-code.git,6049515,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/dracula/visual-studio-code.git""}"
73,Color Highlight,Sergii N,121396ad-85a1-45ec-9fd1-d95028a847f5,https://github.com/naumovs/vscode-ext-color-highlight.git,5961869,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 15, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/naumovs/vscode-ext-color-highlight.git""}"
74,[Deprecated] Bracket Pair Colorizer 2,CoenraadS,5a6e2b21-1d61-4acd-b31b-907f9c23f18a,https://github.com/CoenraadS/Bracket-Pair-Colorizer-2.git,5878451,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 4, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/CoenraadS/Bracket-Pair-Colorizer-2.git""}"
75,markdownlint,David Anson,daf8b44d-8aae-4da2-80c5-1f770219f643,https://github.com/DavidAnson/vscode-markdownlint.git,5814518,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 40, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/DavidAnson/vscode-markdownlint.git""}"
76,Spanish Language Pack for Visual Studio Code,Microsoft,47e020a1-33db-4cc0-a1b4-42f97781749a,https://github.com/Microsoft/vscode-loc.git,5755083,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-loc.git""}"
77,Angular Language Service,Angular,a92d457e-6f3f-4167-8087-1a54e1b6e00e,https://github.com/angular/vscode-ng-language-service.git,5701269,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 20, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/angular/vscode-ng-language-service.git""}"
78,Better Comments,Aaron Bond,7a0110bb-231a-4598-aa1b-0769ea46d28b,https://github.com/aaron-bond/better-comments.git,5611219,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 1, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/aaron-bond/better-comments.git""}"
79,Vue Language Features (Volar),Vue,a5223b43-8621-4351-a14e-3d560f85f277,https://github.com/vuejs/language-tools.git,5558234,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/vuejs/language-tools.git""}"
80,Vim,vscodevim,d96e79c6-8b25-4be3-8545-0e0ecefcae03,https://github.com/VSCodeVim/Vim.git,5498862,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 60, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/VSCodeVim/Vim.git""}"
81,Python Environment Manager,Don Jayamanne,0c9f60fd-5588-42f7-9176-e80c3ae111ec,https://github.com/DonJayamanne/vscode-python-manager.git,5435816,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""python-environment-manager@DonJayamanne/vscode-python-manager#521db1a9b455ef4f69514d7eb2467987a78d7465"", ""request@2.88.2""], ""upgradePath"": [], ""version"": ""2.88.2"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""python-environment-manager@DonJayamanne/vscode-python-manager#521db1a9b455ef4f69514d7eb2467987a78d7465"", ""request@2.88.2"", ""tough-cookie@2.5.0""], ""upgradePath"": [false, false, ""tough-cookie@4.1.3""], ""version"": ""2.5.0"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 112, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 2, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""2 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 2, ""hasUnknownVersions"": false, ""path"": ""https://github.com/DonJayamanne/vscode-python-manager.git""}"
82,Python for VSCode,Thomas Haakon Townsend,19e1cdbe-42df-443e-89c0-bfecc7204b1d,https://github.com/tht13/Python-vscode.git,5313565,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 4, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/tht13/Python-vscode.git""}"
83,XML Tools,Josh Johnson,0cb81da2-1880-4755-9995-0ae9cc728e20,https://github.com/DotJoshJohnson/vscode-xml.git,5156859,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-GOT-2932019"", ""title"": ""Open Redirect"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N"", ""credit"": [""Unknown""], ""semver"": {""vulnerable"": [""<11.8.5"", "">=12.0.0 <12.1.0""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [""11.8.5"", ""12.1.0""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.4, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""got"", ""references"": [{""url"": ""https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0"", ""title"": ""GitHub Diff""}, {""url"": ""https://github.com/sindresorhus/got/pull/2047"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2022-06-29T01:11:26.531842Z""}, {""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2022-11-19T20:57:05.871669Z""}], ""description"": ""## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n"", ""epssDetails"": {""percentile"": ""0.22655"", ""probability"": ""0.00058"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-33987""], ""CWE"": [""CWE-601""]}, ""packageName"": ""got"", ""proprietary"": false, ""creationTime"": ""2022-06-19T09:23:24.210132Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2022-06-19T08:33:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2022-06-19T15:33:44.269688Z"", ""modificationTime"": ""2022-11-19T20:57:05.871669Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""update-notifier@2.5.0"", ""latest-version@3.1.0"", ""package-json@4.0.1"", ""got@6.7.1""], ""upgradePath"": [false, false, ""update-notifier@6.0.0"", ""latest-version@6.0.0"", ""package-json@7.0.0"", ""got@11.8.5""], ""version"": ""6.7.1"", ""name"": ""got"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-LODASH-1018905"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P"", ""credit"": [""Liyuan Chen""], ""semver"": {""vulnerable"": [""<4.17.21""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.21""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.3, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/lodash/lodash/pull/5065"", ""title"": ""GitHub Fix PR""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2023-03-26T15:05:22.200927Z""}, {""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2022-09-14T01:10:48.134557Z""}], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \""1\""\r\nfor (var i = 0; i < n; i++) {\r\nret += \"" \""\r\n}\r\n\r\nreturn ret + \""1\"";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\""time_cost0: \"" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\""time_cost1: \"" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\""time_cost2: \"" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n"", ""epssDetails"": {""percentile"": ""0.54324"", ""probability"": ""0.00182"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2020-28500""], ""CWE"": [""CWE-400""]}, ""packageName"": ""lodash"", ""proprietary"": true, ""creationTime"": ""2020-10-16T16:48:40.985673Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2020-10-16T16:47:34Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2021-02-15T11:50:49Z"", ""modificationTime"": ""2023-03-26T15:05:22.200927Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.2"", ""lodash@4.17.21""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-LODASH-1040724"", ""title"": ""Command Injection"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C"", ""credit"": [""Marc Hassan""], ""semver"": {""vulnerable"": [""<4.17.21""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.21""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.2, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"", ""title"": ""Vulnerable Code""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 7.2, ""modificationTime"": ""2023-03-26T15:05:22.240589Z""}, {""assigner"": ""NVD"", ""severity"": ""high"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 7.2, ""modificationTime"": ""2022-09-14T01:10:48.257735Z""}], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n"", ""epssDetails"": {""percentile"": ""0.75591"", ""probability"": ""0.00606"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2021-23337""], ""CWE"": [""CWE-78""], ""GHSA"": [""GHSA-35jh-r3h4-6jhm""]}, ""packageName"": ""lodash"", ""proprietary"": true, ""creationTime"": ""2020-11-17T14:07:17.048472Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2020-11-17T13:02:10Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2021-02-15T11:50:50Z"", ""modificationTime"": ""2023-03-26T15:05:22.240589Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.2"", ""lodash@4.17.21""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-LODASH-450202"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"", ""credit"": [""Snyk Security Team""], ""semver"": {""vulnerable"": [""<4.17.12""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.12""], ""patches"": [{""id"": ""patch:SNYK-JS-LODASH-450202:0"", ""urls"": [""https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch""], ""version"": ""=4.17.11"", ""comments"": [], ""modificationTime"": ""2019-12-03T11:40:45.719849Z""}], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.3, ""functions"": [{""version"": ["">=4.17.3 <4.17.12""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.customDefaultsMerge""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://github.com/lodash/lodash/issues/4348"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/lodash/lodash/pull/4336"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/lodash/lodash/pull/4355"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/sailshq/lodash/pull/1"", ""title"": ""GitHub PR""}, {""url"": ""https://www.npmjs.com/advisories/1065"", ""title"": ""Node Security Advisory""}, {""url"": ""https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"", ""title"": ""Snyk Blog""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H"", ""cvssV3BaseScore"": 9.1, ""modificationTime"": ""2022-01-03T17:53:52.560412Z""}, {""assigner"": ""Red Hat"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H"", ""cvssV3BaseScore"": 9.1, ""modificationTime"": ""2023-03-26T20:29:27.047214Z""}], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\""constructor\"": {\""prototype\"": {\""a0\"": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n"", ""epssDetails"": {""percentile"": ""0.84325"", ""probability"": ""0.01362"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2019-10744""], ""CWE"": [""CWE-1321""], ""NSP"": [""1065""], ""GHSA"": [""GHSA-jf85-cpcp-j695""]}, ""packageName"": ""lodash"", ""proprietary"": true, ""creationTime"": ""2019-06-19T12:04:21.040000Z"", ""functions_new"": [{""version"": ["">=4.17.3 <4.17.12""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.customDefaultsMerge""}}], ""alternativeIds"": [], ""disclosureTime"": ""2019-06-19T11:45:02Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2019-07-02T11:45:01Z"", ""modificationTime"": ""2023-03-26T20:29:27.047214Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.1"", ""lodash@4.17.13""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-LODASH-608086"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C"", ""credit"": [""awarau""], ""semver"": {""vulnerable"": [""<4.17.17""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.17""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.3, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://hackerone.com/reports/864701"", ""title"": ""HackerOne Report""}], ""cvssDetails"": [], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \""__proto__[test]\"", \""123\"")\r\nlod.set({}, \""__proto__[test2]\"", \""456\"")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n"", ""epssDetails"": null, ""identifiers"": {""CVE"": [], ""CWE"": [""CWE-1321""]}, ""packageName"": ""lodash"", ""proprietary"": false, ""creationTime"": ""2020-08-21T12:52:58.443440Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2020-08-21T10:34:29Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2020-08-21T12:53:03Z"", ""modificationTime"": ""2022-08-25T12:14:41.622393Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.2"", ""lodash@4.17.21""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-LODASH-73638"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"", ""credit"": [""asgerf""], ""semver"": {""vulnerable"": [""<4.17.11""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.11""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 7.3, ""functions"": [{""version"": ["">=4.17.5 <4.17.11""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""safeGet""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.baseMerge""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.assignMergeValue""}}, {""version"": ["">=3.0.0 <4.0.0""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""runInContext.baseMerge""}}, {""version"": ["">=3.0.0 <4.0.0""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=4.0.0 <4.17.3""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.mergeDefaults""}}, {""version"": ["">=2.0.0 <3.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.merge""}}, {""version"": ["">=0.9.0 <1.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""merge""}}, {""version"": ["">=1.0.0 <1.0.3""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""className"": null, ""functionName"": ""merge""}}, {""version"": ["">=1.1.0 <2.0.0""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""className"": null, ""functionName"": ""runInContext.merge""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/lodash/lodash/pull/4337"", ""title"": ""GitHub PR""}, {""url"": ""https://www.npmjs.com/advisories/1066"", ""title"": ""NPM Security Advisory""}, {""url"": ""https://www.npmjs.com/advisories/1068"", ""title"": ""NPM Security Advisory""}, {""url"": ""https://www.npmjs.com/advisories/1071"", ""title"": ""NPM Security Advisory""}, {""url"": ""https://www.npmjs.com/advisories/782"", ""title"": ""NPM Security Advisory""}, {""url"": ""https://hackerone.com/reports/380873"", ""title"": ""POC: HackerOne Report""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L"", ""cvssV3BaseScore"": 5.6, ""modificationTime"": ""2022-01-03T16:22:51.625949Z""}, {""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L"", ""cvssV3BaseScore"": 5.6, ""modificationTime"": ""2023-03-26T14:59:45.926074Z""}], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n"", ""epssDetails"": {""percentile"": ""0.44507"", ""probability"": ""0.00117"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2018-16487""], ""CWE"": [""CWE-1321""], ""NSP"": [""782"", ""1066"", ""1068"", ""1071""], ""GHSA"": [""GHSA-4xc9-xhrj-v574""]}, ""packageName"": ""lodash"", ""proprietary"": true, ""creationTime"": ""2019-02-03T09:06:37.726000Z"", ""functions_new"": [{""version"": ["">=4.17.5 <4.17.11""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""safeGet""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.baseMerge""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.assignMergeValue""}}, {""version"": ["">=3.0.0 <4.0.0""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""runInContext.baseMerge""}}, {""version"": ["">=3.0.0 <4.0.0""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=4.0.0 <4.17.3""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.mergeDefaults""}}, {""version"": ["">=2.0.0 <3.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.merge""}}, {""version"": ["">=0.9.0 <1.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""merge""}}, {""version"": ["">=1.0.0 <1.0.3""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""functionName"": ""merge""}}, {""version"": ["">=1.1.0 <2.0.0""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""functionName"": ""runInContext.merge""}}], ""alternativeIds"": [], ""disclosureTime"": ""2018-08-31T18:21:00Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2019-02-01T18:21:00Z"", ""modificationTime"": ""2023-03-26T14:59:45.926074Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.1"", ""lodash@4.17.13""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-LODASH-73639"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P"", ""credit"": [""cristianstaicu""], ""semver"": {""vulnerable"": [""<4.17.11""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.11""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 4.4, ""functions"": [{""version"": ["">=4.15.0 <4.17.11""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""hasUnicodeWord""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/lodash/lodash/pull/4450"", ""title"": ""GitHub PR""}, {""url"": ""https://github.com/lodash/lodash/issues/3359"", ""title"": ""POC: GitHub Issue""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2022-01-03T17:53:28.079217Z""}], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n"", ""epssDetails"": {""percentile"": ""0.66198"", ""probability"": ""0.00317"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2019-1010266""], ""CWE"": [""CWE-185""]}, ""packageName"": ""lodash"", ""proprietary"": false, ""creationTime"": ""2019-02-03T09:18:05.060741Z"", ""functions_new"": [{""version"": ["">=4.15.0 <4.17.11""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""hasUnicodeWord""}}], ""alternativeIds"": [], ""disclosureTime"": ""2017-09-05T09:14:29Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2019-04-05T09:14:22Z"", ""modificationTime"": ""2022-04-05T12:27:32.267901Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.1"", ""lodash@4.17.13""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-XMLDOM-1084960"", ""title"": ""XML External Entity (XXE) Injection"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N"", ""credit"": [""Unknown""], ""semver"": {""vulnerable"": [""<0.5.0""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [""0.5.0""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.4, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""xmldom"", ""references"": [{""url"": ""https://github.com/xmldom/xmldom/commit/d4201b9dfbf760049f457f9f08a3888d48835135"", ""title"": ""GitHub Commit""}, {""url"": ""https://bugzilla.redhat.com/show_bug.cgi?id=2210851"", ""title"": ""RedHat Bugzilla Bug""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 4.3, ""modificationTime"": ""2022-01-03T16:35:17.615961Z""}], ""description"": ""## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. Does not correctly preserve system identifiers, FPIs or namespaces when repeatedly parsing and serializing maliciously crafted documents.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```\n<xml>\n<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```\n<xml>\n<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \""file:///etc/passwd\"" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `xmldom` to version 0.5.0 or higher.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/d4201b9dfbf760049f457f9f08a3888d48835135)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2210851)\n"", ""epssDetails"": {""percentile"": ""0.51023"", ""probability"": ""0.00156"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2021-21366""], ""CWE"": [""CWE-611""], ""GHSA"": [""GHSA-h6q6-9hqw-rwfv""]}, ""packageName"": ""xmldom"", ""proprietary"": true, ""creationTime"": ""2021-03-10T15:59:11.081028Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2021-03-10T15:34:50Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2021-03-10T16:31:47Z"", ""modificationTime"": ""2023-07-03T07:38:35.619385Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xmldom@0.1.31""], ""upgradePath"": [false, ""xmldom@0.5.0""], ""version"": ""0.1.31"", ""name"": ""xmldom"", ""isUpgradable"": true, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-XMLDOM-1534562"", ""title"": ""Improper Input Validation"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""credit"": [""Unknown""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""xmldom"", ""references"": [{""url"": ""https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/xmldom/xmldom/issues/271"", ""title"": ""GitHub Issue""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2022-04-26T01:10:30.392784Z""}], ""description"": ""## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It does not correctly escape special characters when serializing elements are removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.\r\n\r\n**Note:**\r\nCustomers who use \""xmldom\"" package, should use \""@xmldom/xmldom\"" instead, as \""xmldom\"" is no longer maintained.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/271)\n"", ""epssDetails"": {""percentile"": ""0.28039"", ""probability"": ""0.00068"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2021-32796""], ""CWE"": [""CWE-116""], ""GHSA"": [""GHSA-5fg8-2547-mr8q""]}, ""packageName"": ""xmldom"", ""proprietary"": false, ""creationTime"": ""2021-07-28T06:33:12.846430Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2021-07-28T06:31:31Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2021-07-28T15:12:14Z"", ""modificationTime"": ""2022-05-11T12:48:26.463897Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xmldom@0.1.31""], ""upgradePath"": [], ""version"": ""0.1.31"", ""name"": ""xmldom"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-XMLDOM-3042242"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:L"", ""credit"": [""@Supraja9726""], ""semver"": {""vulnerable"": ["">=0.0.0""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""high"", ""cvssScore"": 8.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""xmldom"", ""references"": [{""url"": ""https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/xmldom/xmldom/issues/436"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/xmldom/xmldom/releases/tag/0.8.3"", ""title"": ""GitHub Release""}, {""url"": ""https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L1"", ""title"": ""Vulnerable Code""}, {""url"": ""https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L3"", ""title"": ""Vulnerable Code""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2022-11-09T01:11:13.683103Z""}], ""description"": ""## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Prototype Pollution through the `copy()` function in `dom.js`. Exploiting this vulnerability is possible via the `p` variable.\r\n\r\n*DISPUTED*\r\nThis vulnerability has been [disputed by the maintainers of the package](https://github.com/xmldom/xmldom/issues/436#issuecomment-1321093759). \r\nCurrently the only viable exploit that has been demonstrated is to pollute the target object (rather then the global object which is generally the case for Prototype Pollution vulnerabilities) and it is yet unclear if this limited attack vector exposes any vulnerability in the context of this package. \r\n\r\nSee the linked [GitHub Issue](https://github.com/xmldom/xmldom/issues/436) for full details on the discussion around the legitimacy and potential revocation of this vulnerability.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/436)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.3)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L1)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L3)\n"", ""epssDetails"": {""percentile"": ""0.44366"", ""probability"": ""0.00116"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-37616""], ""CWE"": [""CWE-1321""], ""GHSA"": [""GHSA-9pgh-qqpf-7wqj""]}, ""packageName"": ""xmldom"", ""proprietary"": false, ""creationTime"": ""2022-10-11T06:43:58.053658Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2022-10-11T06:34:47Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2022-10-11T11:36:43Z"", ""modificationTime"": ""2022-12-26T16:04:03.177916Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""high"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xmldom@0.1.31""], ""upgradePath"": [], ""version"": ""0.1.31"", ""name"": ""xmldom"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-XMLDOM-3092935"", ""title"": ""Improper Input Validation"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P"", ""credit"": [""frumioj"", ""karfau""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""critical"", ""cvssScore"": 9.8, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""xmldom"", ""references"": [{""url"": ""https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/jindw/xmldom/issues/150"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/xmldom/xmldom/releases/tag/0.7.7"", ""title"": ""GitHub Release""}, {""url"": ""https://github.com/xmldom/xmldom/releases/tag/0.8.4"", ""title"": ""GitHub Release""}, {""url"": ""https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2022-11-05T01:10:37.555445Z""}], ""description"": ""## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to parsing XML that is not well-formed, and contains multiple top-level elements. All the root nodes are being added to the `childNodes` collection of the `Document`, without reporting or throwing any error.\r\n\r\n## Workarounds\r\nOne of the following approaches might help, depending on your use case:\r\n\r\n1) Instead of searching for elements in the whole DOM, only search in the `documentElement`.\r\n\r\n2) Reject a document with a document that has more than 1 `childNode`.\n## PoC\n```\r\nvar DOMParser = require('xmldom').DOMParser;\r\nvar xmlData = '<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\\n' +\r\n'<root>\\n' +\r\n'  <branch girth=\""large\"">\\n' +\r\n'    <leaf color=\""green\"" />\\n' +\r\n'  </branch>\\n' +\r\n'</root>\\n' +\r\n'<root>\\n' +\r\n'  <branch girth=\""twig\"">\\n' +\r\n'    <leaf color=\""gold\"" />\\n' +\r\n'  </branch>\\n' +\r\n'</root>\\n';\r\nvar xmlDOM = new DOMParser().parseFromString(xmlData);\r\nconsole.log(xmlDOM.toString());\r\n```\r\n\r\nThis will result with the following output:\r\n```\r\n<?xml version=\""1.0\"" encoding=\""UTF-8\""?><root>\r\n  <branch girth=\""large\"">\r\n    <leaf color=\""green\""/>\r\n  </branch>\r\n</root>\r\n<root>\r\n  <branch girth=\""twig\"">\r\n    <leaf color=\""gold\""/>\r\n  </branch>\r\n</root>\r\n```\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931)\n- [GitHub Issue](https://github.com/jindw/xmldom/issues/150)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.7.7)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.4)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4)\n"", ""epssDetails"": {""percentile"": ""0.23496"", ""probability"": ""0.00060"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-39353""], ""CWE"": [""CWE-20""], ""GHSA"": [""GHSA-crh6-fp67-6883""]}, ""packageName"": ""xmldom"", ""proprietary"": false, ""creationTime"": ""2022-11-02T08:56:15.224765Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2022-11-01T17:29:11Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2022-11-02T12:25:35.940676Z"", ""modificationTime"": ""2023-03-28T14:18:52.833156Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""critical"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xmldom@0.1.31""], ""upgradePath"": [], ""version"": ""0.1.31"", ""name"": ""xmldom"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""npm:lodash:20180130"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P"", ""credit"": [""Olivier Arteau (HoLyVieR)""], ""semver"": {""vulnerable"": [""<4.17.5""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.17.5""], ""patches"": [{""id"": ""patch:npm:lodash:20180130:0"", ""urls"": [""https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch""], ""version"": ""=3.10.1"", ""comments"": [], ""modificationTime"": ""2019-12-03T11:40:45.883000Z""}], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.3, ""functions"": [{""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.baseMerge""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=3.0.0 <4.0.0""], ""functionId"": {""filePath"": ""index.js"", ""className"": null, ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=2.0.0 <3.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""runInContext.merge""}}, {""version"": ["">=1.1.0 <2.0.0""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""className"": null, ""functionName"": ""runInContext.merge""}}, {""version"": ["">=0.9.0 <1.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""className"": null, ""functionName"": ""merge""}}, {""version"": ["">= 1.0.0 <1.0.3""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""className"": null, ""functionName"": ""merge""}}], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""lodash"", ""references"": [{""url"": ""https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/lodash/lodash/pull/4337"", ""title"": ""GitHub PR""}, {""url"": ""https://hackerone.com/reports/310443"", ""title"": ""HackerOne Report""}, {""url"": ""https://www.npmjs.com/advisories/1067"", ""title"": ""NPM Security Advisory""}, {""url"": ""https://www.npmjs.com/advisories/1069"", ""title"": ""NPM Security Advisory""}, {""url"": ""https://www.npmjs.com/advisories/1070"", ""title"": ""NPM Security Advisory""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""low"", ""cvssV3Vector"": ""CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L"", ""cvssV3BaseScore"": 2.9, ""modificationTime"": ""2023-03-26T15:06:44.395574Z""}, {""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2022-01-03T16:27:45.509249Z""}], ""description"": ""## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\""__proto__\"":{\""oops\"":\""It works !\""}}';\r\n\r\nvar a = {};\r\nconsole.log(\""Before : \"" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\""After : \"" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n"", ""epssDetails"": {""percentile"": ""0.39449"", ""probability"": ""0.00097"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2018-3721""], ""CWE"": [""CWE-1321""], ""NSP"": [""577"", ""1067"", ""1069"", ""1070""], ""GHSA"": [""GHSA-fvqr-27wr-82fm"", ""GHSA-5947-m4fg-xhqg"", ""GHSA-46fh-8fc5-xcwx"", ""GHSA-2m96-9w4j-wgv7""], ""ALTERNATIVE"": [""SNYK-JS-LODASH-174180""]}, ""packageName"": ""lodash"", ""proprietary"": true, ""creationTime"": ""2018-02-12T22:28:27.654000Z"", ""functions_new"": [{""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.baseMerge""}}, {""version"": ["">=4.0.0 <4.17.5""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=3.0.0 <4.0.0""], ""functionId"": {""filePath"": ""index.js"", ""functionName"": ""runInContext.baseMergeDeep""}}, {""version"": ["">=2.0.0 <3.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""runInContext.merge""}}, {""version"": ["">=1.1.0 <2.0.0""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""functionName"": ""runInContext.merge""}}, {""version"": ["">=0.9.0 <1.0.0""], ""functionId"": {""filePath"": ""lodash.js"", ""functionName"": ""merge""}}, {""version"": ["">= 1.0.0 <1.0.3""], ""functionId"": {""filePath"": ""dist/lodash.js"", ""functionName"": ""merge""}}], ""alternativeIds"": [""SNYK-JS-LODASH-174180""], ""disclosureTime"": ""2018-01-30T22:28:27Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2018-02-14T13:22:50Z"", ""modificationTime"": ""2023-03-26T15:06:44.395574Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""xml@DotJoshJohnson/vscode-xml#95702e6355fb35d77d2fea7da5af3f505df398a0"", ""xqlint@0.4.1"", ""lodash@3.10.1""], ""upgradePath"": [false, ""xqlint@0.5.0"", ""lodash@4.17.10""], ""version"": ""3.10.1"", ""name"": ""lodash"", ""isUpgradable"": true, ""isPatchable"": true, ""isPinnable"": false}], ""numDependencies"": 86, ""severityMap"": {""critical"": 1, ""high"": 5, ""medium"": 6, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""12 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 12, ""hasUnknownVersions"": false, ""path"": ""https://github.com/DotJoshJohnson/vscode-xml.git""}"
84,CSS Peek,Pranay Prakash,0b8f8d63-11a2-4194-969c-ca7488b3413a,https://github.com/pranaygp/vscode-css-peek.git,4889701,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/pranaygp/vscode-css-peek.git""}"
85,XML,Red Hat,6703768d-d42f-474e-9f6e-5f288d53f6e8,https://github.com/redhat-developer/vscode-xml.git,4847611,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 86, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/redhat-developer/vscode-xml.git""}"
86,Atom One Dark Theme,Mahmoud Ali,9b2c953d-6ad4-46d1-b18e-7e5992d1d8a6,https://github.com/akamud/vscode-theme-onedark.git,4760465,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/akamud/vscode-theme-onedark.git""}"
87,DotENV,mikestead,532533c9-a894-4a58-9eee-bbfbe7c06f71,https://github.com/mikestead/vscode-dotenv.git,4728966,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/mikestead/vscode-dotenv.git""}"
88,Markdown Preview Enhanced,Yiyi Wang,3b1db1fc-c7f7-4bd6-9fa4-b499dfa99a8a,https://github.com/shd101wyy/vscode-markdown-preview-enhanced.git,4649031,"{""ok"": false, ""vulnerabilities"": [{""id"": ""SNYK-JS-MARKDOWNIT-2331914"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"", ""credit"": [""Fujinami Hiroya""], ""semver"": {""vulnerable"": [""<12.3.2""]}, ""exploit"": ""Not Defined"", ""fixedIn"": [""12.3.2""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.3, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""markdown-it"", ""references"": [{""url"": ""https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101"", ""title"": ""GitHub Commit""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"", ""cvssV3BaseScore"": 5.3, ""modificationTime"": ""2022-01-19T04:10:29.722330Z""}], ""description"": ""## Overview\n[markdown-it](https://www.npmjs.com/package/markdown-it) is a modern pluggable markdown parser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `/s+$/` in line 23 of `lib/rules_inline/newline.js`. This expression is used to remove trailing whitespaces from a string, however, it also matches non-trailing whitespaces.\r\nIn the worst-case scenario, the matching process would take computation time proportional to the square of the length of the non-trailing whitespaces. It is possible that a string containing more than tens of thousands characters, as `markdown-it` handles `Markdown`, would be passed over the network, resulting in significant computational time.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet\u2019s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `markdown-it` to version 12.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markdown-it/markdown-it/commit/ffc49ab46b5b751cd2be0aabb146f2ef84986101)\n"", ""epssDetails"": {""percentile"": ""0.34721"", ""probability"": ""0.00085"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2022-21670""], ""CWE"": [""CWE-1333""]}, ""packageName"": ""markdown-it"", ""proprietary"": false, ""creationTime"": ""2022-01-09T12:32:53.638297Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2022-01-09T12:22:24Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2022-01-09T15:54:45Z"", ""modificationTime"": ""2022-01-19T04:10:29.722330Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""markdown-preview-enhanced@shd101wyy/vscode-markdown-preview-enhanced#790352e3d35dfad018111d9fcf89450385735b4d"", ""crossnote@0.8.24"", ""markdown-it-html5-embed@1.0.0"", ""markdown-it@8.4.2""], ""upgradePath"": [false, false, false, ""markdown-it@12.3.2""], ""version"": ""8.4.2"", ""name"": ""markdown-it"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-MARKDOWNIT-459438"", ""title"": ""Regular Expression Denial of Service (ReDoS)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:R"", ""credit"": [""andersk""], ""semver"": {""vulnerable"": [""<10.0.0""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""10.0.0""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 5.3, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""markdown-it"", ""references"": [{""url"": ""https://github.com/markdown-it/markdown-it/commit/07a62c6c751455da95a4ec9dfad2576b9dcd766a"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/markdown-it/markdown-it/issues/583"", ""title"": ""GitHub Issue""}], ""cvssDetails"": [], ""description"": ""## Overview\n\n[markdown-it](https://www.npmjs.com/package/markdown-it) is a modern pluggable markdown parser.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nParsing *_*_*_\u2026 takes quadratic time, this could be a denial of service vulnerability in an application that parses user input.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet\u2019s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\"")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\""ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn\u2019t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \""ACCCX\"". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\n\nUpgrade `markdown-it` to version 10.0.0 or higher.\n\n\n\n## References\n\n- [GitHub Commit](https://github.com/markdown-it/markdown-it/commit/07a62c6c751455da95a4ec9dfad2576b9dcd766a)\n\n- [GitHub Issue](https://github.com/markdown-it/markdown-it/issues/583)\n"", ""epssDetails"": null, ""identifiers"": {""CVE"": [], ""CWE"": [""CWE-400""]}, ""packageName"": ""markdown-it"", ""proprietary"": false, ""creationTime"": ""2019-08-15T14:36:54.583523Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2019-08-14T03:00:26Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2019-10-09T14:37:09Z"", ""modificationTime"": ""2020-12-14T14:41:05.787932Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""markdown-preview-enhanced@shd101wyy/vscode-markdown-preview-enhanced#790352e3d35dfad018111d9fcf89450385735b4d"", ""crossnote@0.8.24"", ""markdown-it-html5-embed@1.0.0"", ""markdown-it@8.4.2""], ""upgradePath"": [false, false, false, ""markdown-it@10.0.0""], ""version"": ""8.4.2"", ""name"": ""markdown-it"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-REQUEST-3361831"", ""title"": ""Server-side Request Forgery (SSRF)"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""SzymonDrosdzol""], ""semver"": {""vulnerable"": [""*""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""request"", ""references"": [{""url"": ""https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/request/request/issues/3442"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/request/request/pull/3444"", ""title"": ""GitHub PR""}], ""cvssDetails"": [{""assigner"": ""NVD"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.1, ""modificationTime"": ""2023-03-23T01:10:17.579856Z""}], ""description"": ""## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n"", ""epssDetails"": {""percentile"": ""0.24986"", ""probability"": ""0.00063"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-28155""], ""CWE"": [""CWE-918""]}, ""packageName"": ""request"", ""proprietary"": false, ""creationTime"": ""2023-03-16T13:58:23.124636Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-03-16T13:49:16Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-03-17T07:46:44.219769Z"", ""modificationTime"": ""2023-08-30T13:20:36.826459Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""markdown-preview-enhanced@shd101wyy/vscode-markdown-preview-enhanced#790352e3d35dfad018111d9fcf89450385735b4d"", ""crossnote@0.8.24"", ""request@2.88.2""], ""upgradePath"": [], ""version"": ""2.88.2"", ""name"": ""request"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}, {""id"": ""SNYK-JS-TOUGHCOOKIE-5672873"", ""title"": ""Prototype Pollution"", ""CVSSv3"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P"", ""credit"": [""Kokorin Vsevolod""], ""semver"": {""vulnerable"": [""<4.1.3""]}, ""exploit"": ""Proof of Concept"", ""fixedIn"": [""4.1.3""], ""patches"": [], ""insights"": {""triageAdvice"": null}, ""language"": ""js"", ""severity"": ""medium"", ""cvssScore"": 6.5, ""functions"": [], ""malicious"": false, ""isDisputed"": false, ""moduleName"": ""tough-cookie"", ""references"": [{""url"": ""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e"", ""title"": ""GitHub Commit""}, {""url"": ""https://github.com/salesforce/tough-cookie/issues/282"", ""title"": ""GitHub Issue""}, {""url"": ""https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3"", ""title"": ""GitHub Release""}], ""cvssDetails"": [{""assigner"": ""Red Hat"", ""severity"": ""medium"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N"", ""cvssV3BaseScore"": 6.5, ""modificationTime"": ""2023-07-06T13:31:55.808983Z""}, {""assigner"": ""NVD"", ""severity"": ""critical"", ""cvssV3Vector"": ""CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"", ""cvssV3BaseScore"": 9.8, ""modificationTime"": ""2023-07-08T01:12:36.395017Z""}], ""description"": ""## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\""tough-cookie\"");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \""Slonser=polluted; Domain=__proto__; Path=/notauth\"",\r\n  \""https://__proto__/admin\""\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \""Auth=Lol; Domain=google.com; Path=/notauth\"",\r\n  \""https://google.com/\""\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\""/notauth\""][\""Slonser\""])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \u201cpath\u201d, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype\u2014 use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \u201cJavaScript prototype pollution attack in NodeJS application.\u201d GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n"", ""epssDetails"": {""percentile"": ""0.53347"", ""probability"": ""0.00173"", ""modelVersion"": ""v2023.03.01""}, ""identifiers"": {""CVE"": [""CVE-2023-26136""], ""CWE"": [""CWE-1321""]}, ""packageName"": ""tough-cookie"", ""proprietary"": true, ""creationTime"": ""2023-06-08T15:08:51.664280Z"", ""functions_new"": [], ""alternativeIds"": [], ""disclosureTime"": ""2023-06-08T14:45:59Z"", ""packageManager"": ""npm"", ""publicationTime"": ""2023-06-30T11:54:16.657348Z"", ""modificationTime"": ""2023-07-09T13:39:02.212708Z"", ""socialTrendAlert"": false, ""severityWithCritical"": ""medium"", ""packagePopularityRank"": 99, ""from"": [""markdown-preview-enhanced@shd101wyy/vscode-markdown-preview-enhanced#790352e3d35dfad018111d9fcf89450385735b4d"", ""crossnote@0.8.24"", ""request@2.88.2"", ""tough-cookie@2.5.0""], ""upgradePath"": [false, false, false, ""tough-cookie@4.1.3""], ""version"": ""2.5.0"", ""name"": ""tough-cookie"", ""isUpgradable"": false, ""isPatchable"": false, ""isPinnable"": false}], ""numDependencies"": 552, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 4, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""4 vulnerable dependency paths"", ""filesystemPolicy"": false, ""filtered"": {""ignore"": [], ""patch"": []}, ""uniqueCount"": 4, ""hasUnknownVersions"": false, ""path"": ""https://github.com/shd101wyy/vscode-markdown-preview-enhanced.git""}"
89,Remote Development,Microsoft,23d72dfc-8dd1-4e30-926e-8783b4378f13,https://github.com/Microsoft/vscode-remote-release.git,4563977,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-remote-release.git""}"
90,Russian Language Pack for Visual Studio Code,Microsoft,392df454-688b-4d61-8dba-a12956ac6448,https://github.com/Microsoft/vscode-loc.git,4451651,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-loc.git""}"
91,Portuguese (Brazil) Language Pack for Visual Studio Code,Microsoft,3fd25437-acd9-42d7-ab19-581a69ce2dd9,https://github.com/Microsoft/vscode-loc.git,4437114,"{""ok"": false, ""error"": ""Couldn't find the requested package or version"", ""path"": ""https://github.com/Microsoft/vscode-loc.git""}"
92,CodeLLDB,Vadim Chugunov,bee31e34-a44b-4a76-9ec2-e9fd1439a0f6,https://github.com/vadimcn/codelldb.git,4415130,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 6, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/vadimcn/codelldb.git""}"
93,PHP Extension Pack,Xdebug,1a9300c9-36a6-44d1-9d09-ada3641b8727,https://github.com/zobo/vscode-php-pack.git,4392839,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/zobo/vscode-php-pack.git""}"
94,Tailwind CSS IntelliSense,Tailwind Labs,4db62a7c-7d70-419c-96d2-6c3a4dc77ea5,https://github.com/tailwindlabs/tailwindcss-intellisense.git,4242090,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/tailwindlabs/tailwindcss-intellisense.git""}"
95,Angular Snippets (Version 16),John Papa,214cbfb9-7c06-4467-bad4-357ae83eb587,https://github.com/johnpapa/vscode-angular-snippets.git,4079618,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/johnpapa/vscode-angular-snippets.git""}"
96,Excel Viewer,GrapeCity,8bb12ae3-73f8-40cf-86b7-4bd5729c6238,https://github.com/wijmo/gc-excelviewer.git,4005626,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 2, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/wijmo/gc-excelviewer.git""}"
97,vscode-pdf,tomoki1207,4386e6f6-ec10-4463-9d23-c24278718947,https://github.com/tomoki1207/vscode-pdfviewer.git,4000897,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 1, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/tomoki1207/vscode-pdfviewer.git""}"
98,TSLint,Microsoft,90a37ca1-92a2-488a-b196-7a8c0b0127ea,https://github.com/Microsoft/vscode-typescript-tslint-plugin.git,3933737,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 14, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/Microsoft/vscode-typescript-tslint-plugin.git""}"
99,React Native Tools,Microsoft,b35cd5b4-18db-46f9-ba9e-06096c3b22d3,https://github.com/microsoft/vscode-react-native.git,3913866,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 102, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/microsoft/vscode-react-native.git""}"
100,TODO Highlight,Wayou Liu,97a08c5f-6667-4242-a5c5-045dfb6bd4b9,https://github.com/wayou/vscode-todo-highlight.git,3913308,"{""ok"": true, ""vulnerabilities"": [], ""numDependencies"": 0, ""severityMap"": {""critical"": 0, ""high"": 0, ""medium"": 0, ""low"": 0}, ""org"": ""bruswei"", ""packageManager"": ""npm"", ""summary"": ""No known vulnerabilities"", ""filesystemPolicy"": false, ""uniqueCount"": 0, ""hasUnknownVersions"": false, ""path"": ""https://github.com/wayou/vscode-todo-highlight.git""}"
