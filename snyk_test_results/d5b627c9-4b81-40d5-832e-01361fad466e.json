{
  "ok": false,
  "vulnerabilities": [
    {
      "id": "SNYK-JS-REQUEST-3361831",
      "title": "Server-side Request Forgery (SSRF)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "credit": [
        "SzymonDrosdzol"
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "request",
      "references": [
        {
          "url": "https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/request/request/issues/3442",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/request/request/pull/3444",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.1,
          "modificationTime": "2023-03-23T01:10:17.579856Z"
        }
      ],
      "description": "## Overview\n[request](https://www.npmjs.com/package/request) is a simplified http request client.\n\nAffected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).\r\n\r\n**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)\n- [GitHub Issue](https://github.com/request/request/issues/3442)\n- [GitHub PR](https://github.com/request/request/pull/3444)\n",
      "epssDetails": {
        "percentile": "0.24986",
        "probability": "0.00063",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-28155"
        ],
        "CWE": [
          "CWE-918"
        ]
      },
      "packageName": "request",
      "proprietary": false,
      "creationTime": "2023-03-16T13:58:23.124636Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-03-16T13:49:16Z",
      "packageManager": "npm",
      "publicationTime": "2023-03-17T07:46:44.219769Z",
      "modificationTime": "2023-08-30T13:20:36.826459Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "tor-request@3.1.0",
        "request@2.88.2"
      ],
      "upgradePath": [],
      "version": "2.88.2",
      "name": "request",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TAR-1536528",
      "title": "Arbitrary File Overwrite",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "semver": {
        "vulnerable": [
          "<3.2.3",
          ">=4.0.0 <4.4.15",
          ">=5.0.0 <5.0.7",
          ">=6.0.0 <6.1.2"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.3",
        "4.4.15",
        "5.0.7",
        "6.1.2"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.2,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tar",
      "references": [
        {
          "url": "https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-07-03T01:10:57.821855Z"
        },
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-05-18T11:03:10.716138Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-11-27T21:12:46.430209Z"
        }
      ],
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient symlink protection.\r\n`node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting tar files that contain both a directory and a symlink with the same name as the directory. This order of operations results in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to `mkdir` for that directory are skipped.\r\nHowever, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 3.2.3, 4.4.15, 5.0.7, 6.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20)\n",
      "epssDetails": {
        "percentile": "0.80342",
        "probability": "0.00889",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2021-32803"
        ],
        "CWE": [
          "CWE-22"
        ],
        "NSP": [
          "1771"
        ],
        "GHSA": [
          "GHSA-r628-mhmh-qjhw"
        ]
      },
      "packageName": "tar",
      "proprietary": false,
      "creationTime": "2021-08-04T06:32:44.747650Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-08-04T06:13:39Z",
      "packageManager": "npm",
      "publicationTime": "2021-08-04T07:24:54.942553Z",
      "modificationTime": "2022-11-27T21:12:46.430209Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "gulp-untar@0.0.8",
        "tar@2.2.2"
      ],
      "upgradePath": [
        false,
        false,
        "tar@3.2.3"
      ],
      "version": "2.2.2",
      "name": "tar",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TAR-1536531",
      "title": "Arbitrary File Overwrite",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "semver": {
        "vulnerable": [
          "<3.2.2",
          ">=4.0.0 <4.4.14",
          ">=5.0.0 <5.0.6",
          ">=6.0.0 <6.1.1"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "3.2.2",
        "4.4.14",
        "5.0.6",
        "6.1.1"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.2,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tar",
      "references": [
        {
          "url": "https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-05-18T11:04:11.840455Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-04-26T01:10:35.141363Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-11-27T21:12:26.283913Z"
        }
      ],
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Overwrite. This is due to insufficient absolute path sanitization.\r\n\r\n`node-tar` aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example, the path `/home/user/.bashrc` would turn into `home/user/.bashrc`.\r\n\r\nThis logic is insufficient when file paths contain repeated path roots such as `////home/user/.bashrc`. `node-tar` only strips a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) still resolves to an absolute path.\n## Remediation\nUpgrade `tar` to version 3.2.2, 4.4.14, 5.0.6, 6.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/1f036ca23f64a547bdd6c79c1a44bc62e8115da4)\n",
      "epssDetails": {
        "percentile": "0.85843",
        "probability": "0.01656",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2021-32804"
        ],
        "CWE": [
          "CWE-22"
        ],
        "NSP": [
          "1770"
        ],
        "GHSA": [
          "GHSA-3jfq-g458-7qm9"
        ]
      },
      "packageName": "tar",
      "proprietary": false,
      "creationTime": "2021-08-04T06:40:36.725155Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-08-04T06:33:52Z",
      "packageManager": "npm",
      "publicationTime": "2021-08-04T07:24:55.599985Z",
      "modificationTime": "2022-11-27T21:12:26.283913Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "gulp-untar@0.0.8",
        "tar@2.2.2"
      ],
      "upgradePath": [
        false,
        false,
        "tar@3.2.2"
      ],
      "version": "2.2.2",
      "name": "tar",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TAR-1536758",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:U/RL:O/RC:R",
      "credit": [
        "@isaacs"
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.4",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "exploit": "Unproven",
      "fixedIn": [
        "6.1.4",
        "5.0.8",
        "4.4.16"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "low",
      "cvssScore": 3.7,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tar",
      "references": [
        {
          "url": "https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). When stripping the trailing slash from `files` arguments, the  `f.replace(/\\/+$/, '')` performance of this function can exponentially degrade when `f` contains many `/` characters resulting in ReDoS. \r\n\r\nThis vulnerability is not likely to be exploitable as it requires that the untrusted input is being passed into the `tar.extract()` or `tar.list()` array of entries to parse/extract, which would be unusual.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tar` to version 6.1.4, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/adf35115dbc6e7a479fe3c38f859baf6ffff7a7a)\n- [GitHub Commit](https://github.com/npm/node-tar/commit/d3d5a4e4560f18131e64fc62f5a281b238ef2ecf)\n",
      "epssDetails": null,
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "packageName": "tar",
      "proprietary": false,
      "creationTime": "2021-08-05T12:41:27.304655Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-08-05T12:38:55Z",
      "packageManager": "npm",
      "publicationTime": "2021-08-05T14:33:10Z",
      "modificationTime": "2021-08-11T16:47:34.347918Z",
      "socialTrendAlert": false,
      "severityWithCritical": "low",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "gulp-untar@0.0.8",
        "tar@2.2.2"
      ],
      "upgradePath": [
        false,
        false,
        "tar@4.4.16"
      ],
      "version": "2.2.2",
      "name": "tar",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TAR-1579147",
      "title": "Arbitrary File Write",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "credit": [
        "ginkoid",
        "chen-robert"
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.7",
          ">=5.0.0 <5.0.8",
          "<4.4.16"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.7",
        "5.0.8",
        "4.4.16"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tar",
      "references": [
        {
          "url": "https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.6,
          "modificationTime": "2022-04-26T01:10:35.689720Z"
        },
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-05-03T21:17:39.668619Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-09-13T21:08:20.388255Z"
        }
      ],
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic was insufficient when extracting `tar` files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators. However, `\\` is a valid filename character on posix systems.\r\n\r\nBy first creating a directory, and then replacing that directory with a symlink, it is possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location. This can lead to extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.\r\n\r\nAdditionally, a similar confusion could arise on case-insensitive filesystems. If a `tar` archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but not from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created.\n## Remediation\nUpgrade `tar` to version 6.1.7, 5.0.8, 4.4.16 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728)\n",
      "epssDetails": {
        "percentile": "0.43105",
        "probability": "0.00110",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2021-37701"
        ],
        "CWE": [
          "CWE-22"
        ],
        "NSP": [
          "1779"
        ],
        "GHSA": [
          "GHSA-9r2w-394v-53qc"
        ]
      },
      "packageName": "tar",
      "proprietary": false,
      "creationTime": "2021-09-01T05:55:13.724747Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-09-01T05:45:02Z",
      "packageManager": "npm",
      "publicationTime": "2021-09-01T07:55:13.009873Z",
      "modificationTime": "2022-09-13T21:08:20.388255Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "gulp-untar@0.0.8",
        "tar@2.2.2"
      ],
      "upgradePath": [
        false,
        false,
        "tar@4.4.16"
      ],
      "version": "2.2.2",
      "name": "tar",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TAR-1579152",
      "title": "Arbitrary File Write",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tar",
      "references": [
        {
          "url": "https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.6,
          "modificationTime": "2022-04-26T01:10:35.782070Z"
        },
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-05-03T21:18:09.683772Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-09-13T18:47:58.237883Z"
        }
      ],
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.\r\n\r\nThis logic is insufficient when extracting `tar` files that contain two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts.\r\nA specially crafted `tar` archive can include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. This leads to bypassing `node-tar` symlink checks on directories, essentially allowing an untrusted `tar` file to symlink into an arbitrary location and extracting arbitrary files into that location.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455)\n",
      "epssDetails": {
        "percentile": "0.43105",
        "probability": "0.00110",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2021-37712"
        ],
        "CWE": [
          "CWE-22"
        ],
        "NSP": [
          "1780"
        ],
        "GHSA": [
          "GHSA-qq89-hq3f-393p"
        ]
      },
      "packageName": "tar",
      "proprietary": false,
      "creationTime": "2021-09-01T06:04:41.432860Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-09-01T05:57:49Z",
      "packageManager": "npm",
      "publicationTime": "2021-09-01T07:55:12.359155Z",
      "modificationTime": "2022-09-13T18:47:58.237883Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "gulp-untar@0.0.8",
        "tar@2.2.2"
      ],
      "upgradePath": [
        false,
        false,
        "tar@4.4.18"
      ],
      "version": "2.2.2",
      "name": "tar",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TAR-1579155",
      "title": "Arbitrary File Write",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:L",
      "credit": [
        "ginkoid",
        "chen-robert",
        "JarLob"
      ],
      "semver": {
        "vulnerable": [
          ">=6.0.0 <6.1.9",
          ">=5.0.0 <5.0.10",
          "<4.4.18"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "6.1.9",
        "5.0.10",
        "4.4.18"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": "This vulnerability is only applicable on Windows operating system"
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tar",
      "references": [
        {
          "url": "https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
          "cvssV3BaseScore": 8.2,
          "modificationTime": "2022-05-03T21:18:12.740276Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.6,
          "modificationTime": "2022-04-26T01:10:36.631320Z"
        }
      ],
      "description": "## Overview\n[tar](https://www.npmjs.com/package/tar) is a full-featured Tar for Node.js.\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `node-tar` aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory.\r\n\r\nThis logic is insufficient on Windows systems when extracting `tar` files that contain a path that is not an absolute path, but specify a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` resolves against the current working directory on the `C:` drive, rather than the extraction target directory.\r\n\r\nAdditionally, a `..` portion of the path can occur immediately after the drive letter, such as `C:../foo`, and is not properly sanitized by the logic that checks for `..` within the normalized and split portions of the path.\r\n\r\n**Note:** This only affects users of `node-tar` on Windows systems.\n## Remediation\nUpgrade `tar` to version 6.1.9, 5.0.10, 4.4.18 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598)\n",
      "epssDetails": {
        "percentile": "0.23142",
        "probability": "0.00059",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2021-37713"
        ],
        "CWE": [
          "CWE-22"
        ],
        "NSP": [
          "1781"
        ],
        "GHSA": [
          "GHSA-5955-9wpr-37jh"
        ]
      },
      "packageName": "tar",
      "proprietary": false,
      "creationTime": "2021-09-01T06:09:32.775270Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-09-01T06:05:10Z",
      "packageManager": "npm",
      "publicationTime": "2021-09-01T07:55:11.707292Z",
      "modificationTime": "2022-06-23T09:38:04.790680Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "gulp-untar@0.0.8",
        "tar@2.2.2"
      ],
      "upgradePath": [
        false,
        false,
        "tar@4.4.18"
      ],
      "version": "2.2.2",
      "name": "tar",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    },
    {
      "id": "SNYK-JS-TOUGHCOOKIE-5672873",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P",
      "credit": [
        "Kokorin Vsevolod"
      ],
      "semver": {
        "vulnerable": [
          "<4.1.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.1.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.5,
      "functions": [],
      "malicious": false,
      "isDisputed": false,
      "moduleName": "tough-cookie",
      "references": [
        {
          "url": "https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/salesforce/tough-cookie/issues/282",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3",
          "title": "GitHub Release"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
          "cvssV3BaseScore": 6.5,
          "modificationTime": "2023-07-06T13:31:55.808983Z"
        },
        {
          "assigner": "NVD",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2023-07-08T01:12:36.395017Z"
        }
      ],
      "description": "## Overview\n[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.\n## PoC\n```\r\n// PoC.js\r\nasync function main(){\r\nvar tough = require(\"tough-cookie\");\r\nvar cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});\r\n// Exploit cookie\r\nawait cookiejar.setCookie(\r\n  \"Slonser=polluted; Domain=__proto__; Path=/notauth\",\r\n  \"https://__proto__/admin\"\r\n);\r\n// normal cookie\r\nvar cookie = await cookiejar.setCookie(\r\n  \"Auth=Lol; Domain=google.com; Path=/notauth\",\r\n  \"https://google.com/\"\r\n);\r\n\r\n//Exploit cookie\r\nvar a = {};\r\nconsole.log(a[\"/notauth\"][\"Slonser\"])\r\n}\r\nmain();\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `tough-cookie` to version 4.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)\n- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)\n- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)\n",
      "epssDetails": {
        "percentile": "0.53347",
        "probability": "0.00173",
        "modelVersion": "v2023.03.01"
      },
      "identifiers": {
        "CVE": [
          "CVE-2023-26136"
        ],
        "CWE": [
          "CWE-1321"
        ]
      },
      "packageName": "tough-cookie",
      "proprietary": true,
      "creationTime": "2023-06-08T15:08:51.664280Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-06-08T14:45:59Z",
      "packageManager": "npm",
      "publicationTime": "2023-06-30T11:54:16.657348Z",
      "modificationTime": "2023-07-09T13:39:02.212708Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "packagePopularityRank": 99,
      "from": [
        "linkcheckerhtml@BillDietrich/linkcheckerhtml#55a071fa77dea17606d65fd889ba062b16b6ede1",
        "tor-request@3.1.0",
        "request@2.88.2",
        "tough-cookie@2.5.0"
      ],
      "upgradePath": [
        false,
        false,
        false,
        "tough-cookie@4.1.3"
      ],
      "version": "2.5.0",
      "name": "tough-cookie",
      "isUpgradable": false,
      "isPatchable": false,
      "isPinnable": false
    }
  ],
  "numDependencies": 121,
  "severityMap": {
    "critical": 0,
    "high": 5,
    "medium": 2,
    "low": 1
  },
  "org": "bruswei",
  "packageManager": "npm",
  "summary": "8 vulnerable dependency paths",
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 8,
  "hasUnknownVersions": false,
  "path": "https://github.com/BillDietrich/linkcheckerhtml.git"
}
